// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: y.proto

package ptp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrivateTransferTransportClient is the client API for PrivateTransferTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateTransferTransportClient interface {
	Peek(ctx context.Context, in *PeekInbound, opts ...grpc.CallOption) (*TransportOutbound, error)
	Pop(ctx context.Context, in *PopInbound, opts ...grpc.CallOption) (*TransportOutbound, error)
	Push(ctx context.Context, in *PushInbound, opts ...grpc.CallOption) (*TransportOutbound, error)
	Release(ctx context.Context, in *ReleaseInbound, opts ...grpc.CallOption) (*TransportOutbound, error)
}

type privateTransferTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateTransferTransportClient(cc grpc.ClientConnInterface) PrivateTransferTransportClient {
	return &privateTransferTransportClient{cc}
}

func (c *privateTransferTransportClient) Peek(ctx context.Context, in *PeekInbound, opts ...grpc.CallOption) (*TransportOutbound, error) {
	out := new(TransportOutbound)
	err := c.cc.Invoke(ctx, "/org.ppc.ptp.PrivateTransferTransport/peek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateTransferTransportClient) Pop(ctx context.Context, in *PopInbound, opts ...grpc.CallOption) (*TransportOutbound, error) {
	out := new(TransportOutbound)
	err := c.cc.Invoke(ctx, "/org.ppc.ptp.PrivateTransferTransport/pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateTransferTransportClient) Push(ctx context.Context, in *PushInbound, opts ...grpc.CallOption) (*TransportOutbound, error) {
	out := new(TransportOutbound)
	err := c.cc.Invoke(ctx, "/org.ppc.ptp.PrivateTransferTransport/push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateTransferTransportClient) Release(ctx context.Context, in *ReleaseInbound, opts ...grpc.CallOption) (*TransportOutbound, error) {
	out := new(TransportOutbound)
	err := c.cc.Invoke(ctx, "/org.ppc.ptp.PrivateTransferTransport/release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateTransferTransportServer is the server API for PrivateTransferTransport service.
// All implementations should embed UnimplementedPrivateTransferTransportServer
// for forward compatibility
type PrivateTransferTransportServer interface {
	Peek(context.Context, *PeekInbound) (*TransportOutbound, error)
	Pop(context.Context, *PopInbound) (*TransportOutbound, error)
	Push(context.Context, *PushInbound) (*TransportOutbound, error)
	Release(context.Context, *ReleaseInbound) (*TransportOutbound, error)
}

// UnimplementedPrivateTransferTransportServer should be embedded to have forward compatible implementations.
type UnimplementedPrivateTransferTransportServer struct {
}

func (UnimplementedPrivateTransferTransportServer) Peek(context.Context, *PeekInbound) (*TransportOutbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peek not implemented")
}
func (UnimplementedPrivateTransferTransportServer) Pop(context.Context, *PopInbound) (*TransportOutbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pop not implemented")
}
func (UnimplementedPrivateTransferTransportServer) Push(context.Context, *PushInbound) (*TransportOutbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedPrivateTransferTransportServer) Release(context.Context, *ReleaseInbound) (*TransportOutbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}

// UnsafePrivateTransferTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateTransferTransportServer will
// result in compilation errors.
type UnsafePrivateTransferTransportServer interface {
	mustEmbedUnimplementedPrivateTransferTransportServer()
}

func RegisterPrivateTransferTransportServer(s grpc.ServiceRegistrar, srv PrivateTransferTransportServer) {
	s.RegisterService(&PrivateTransferTransport_ServiceDesc, srv)
}

func _PrivateTransferTransport_Peek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeekInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateTransferTransportServer).Peek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.ptp.PrivateTransferTransport/peek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateTransferTransportServer).Peek(ctx, req.(*PeekInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateTransferTransport_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateTransferTransportServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.ptp.PrivateTransferTransport/pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateTransferTransportServer).Pop(ctx, req.(*PopInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateTransferTransport_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateTransferTransportServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.ptp.PrivateTransferTransport/push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateTransferTransportServer).Push(ctx, req.(*PushInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateTransferTransport_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateTransferTransportServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.ptp.PrivateTransferTransport/release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateTransferTransportServer).Release(ctx, req.(*ReleaseInbound))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateTransferTransport_ServiceDesc is the grpc.ServiceDesc for PrivateTransferTransport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateTransferTransport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.ppc.ptp.PrivateTransferTransport",
	HandlerType: (*PrivateTransferTransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "peek",
			Handler:    _PrivateTransferTransport_Peek_Handler,
		},
		{
			MethodName: "pop",
			Handler:    _PrivateTransferTransport_Pop_Handler,
		},
		{
			MethodName: "push",
			Handler:    _PrivateTransferTransport_Push_Handler,
		},
		{
			MethodName: "release",
			Handler:    _PrivateTransferTransport_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "y.proto",
}
