// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: x.proto

package ptp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrivateTransferProtocolClient is the client API for PrivateTransferProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateTransferProtocolClient interface {
	Transport(ctx context.Context, opts ...grpc.CallOption) (PrivateTransferProtocol_TransportClient, error)
	Invoke(ctx context.Context, in *Inbound, opts ...grpc.CallOption) (*Outbound, error)
}

type privateTransferProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateTransferProtocolClient(cc grpc.ClientConnInterface) PrivateTransferProtocolClient {
	return &privateTransferProtocolClient{cc}
}

func (c *privateTransferProtocolClient) Transport(ctx context.Context, opts ...grpc.CallOption) (PrivateTransferProtocol_TransportClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrivateTransferProtocol_ServiceDesc.Streams[0], "/org.ppc.ptp.PrivateTransferProtocol/transport", opts...)
	if err != nil {
		return nil, err
	}
	x := &privateTransferProtocolTransportClient{stream}
	return x, nil
}

type PrivateTransferProtocol_TransportClient interface {
	Send(*Inbound) error
	Recv() (*Outbound, error)
	grpc.ClientStream
}

type privateTransferProtocolTransportClient struct {
	grpc.ClientStream
}

func (x *privateTransferProtocolTransportClient) Send(m *Inbound) error {
	return x.ClientStream.SendMsg(m)
}

func (x *privateTransferProtocolTransportClient) Recv() (*Outbound, error) {
	m := new(Outbound)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *privateTransferProtocolClient) Invoke(ctx context.Context, in *Inbound, opts ...grpc.CallOption) (*Outbound, error) {
	out := new(Outbound)
	err := c.cc.Invoke(ctx, "/org.ppc.ptp.PrivateTransferProtocol/invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateTransferProtocolServer is the server API for PrivateTransferProtocol service.
// All implementations should embed UnimplementedPrivateTransferProtocolServer
// for forward compatibility
type PrivateTransferProtocolServer interface {
	Transport(PrivateTransferProtocol_TransportServer) error
	Invoke(context.Context, *Inbound) (*Outbound, error)
}

// UnimplementedPrivateTransferProtocolServer should be embedded to have forward compatible implementations.
type UnimplementedPrivateTransferProtocolServer struct {
}

func (UnimplementedPrivateTransferProtocolServer) Transport(PrivateTransferProtocol_TransportServer) error {
	return status.Errorf(codes.Unimplemented, "method Transport not implemented")
}
func (UnimplementedPrivateTransferProtocolServer) Invoke(context.Context, *Inbound) (*Outbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}

// UnsafePrivateTransferProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateTransferProtocolServer will
// result in compilation errors.
type UnsafePrivateTransferProtocolServer interface {
	mustEmbedUnimplementedPrivateTransferProtocolServer()
}

func RegisterPrivateTransferProtocolServer(s grpc.ServiceRegistrar, srv PrivateTransferProtocolServer) {
	s.RegisterService(&PrivateTransferProtocol_ServiceDesc, srv)
}

func _PrivateTransferProtocol_Transport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrivateTransferProtocolServer).Transport(&privateTransferProtocolTransportServer{stream})
}

type PrivateTransferProtocol_TransportServer interface {
	Send(*Outbound) error
	Recv() (*Inbound, error)
	grpc.ServerStream
}

type privateTransferProtocolTransportServer struct {
	grpc.ServerStream
}

func (x *privateTransferProtocolTransportServer) Send(m *Outbound) error {
	return x.ServerStream.SendMsg(m)
}

func (x *privateTransferProtocolTransportServer) Recv() (*Inbound, error) {
	m := new(Inbound)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PrivateTransferProtocol_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Inbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateTransferProtocolServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.ptp.PrivateTransferProtocol/invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateTransferProtocolServer).Invoke(ctx, req.(*Inbound))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateTransferProtocol_ServiceDesc is the grpc.ServiceDesc for PrivateTransferProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateTransferProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.ppc.ptp.PrivateTransferProtocol",
	HandlerType: (*PrivateTransferProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "invoke",
			Handler:    _PrivateTransferProtocol_Invoke_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "transport",
			Handler:       _PrivateTransferProtocol_Transport_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "x.proto",
}
