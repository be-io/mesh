/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"
	"strings"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	proxympx "github.com/opendatav/mesh/client/golang/proxy"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/tool"
	"github.com/opendatav/mesh/client/golang/types"
	prsimmps "github.com/opendatav/mesh/plugin/prsim"
)

func init() {
	var service = &meshPRSISubscriberMPS{mps: new(prsimmps.PRSISubscriber)}
	var _ prsim.Subscriber = service
	macro.Provide((*prsim.Subscriber)(nil), service)

	var serviceSubscribe = &meshPRSISubscriberSubscribeMPS{service: service}
	var _ mpc.Invoker = serviceSubscribe
	var _ macro.Caller = serviceSubscribe
	macro.Provide(mpc.IInvoker, serviceSubscribe)
	macro.Provide(macro.ICaller, serviceSubscribe)

}

// meshPRSISubscriberMPS is an implementation of prsim.PRSISubscriber
type meshPRSISubscriberMPS struct {
	mps *prsimmps.PRSISubscriber
}

func (that *meshPRSISubscriberMPS) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshSPI}
}

func (that *meshPRSISubscriberMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: macro.MeshMPS}
}

// Subscribe the event with {@link com.be.mesh.client.annotate.Bindings} or {@link com.be.mesh.client.annotate.Binding}
// @MPI("mesh.queue.subscribe")
func (that *meshPRSISubscriberMPS) Subscribe(ctx context.Context, event *types.Event) error {
	return that.mps.Subscribe(ctx, event)
}

type meshPRSISubscriberSubscribeMPS struct {
	service prsim.Subscriber
}

func (that *meshPRSISubscriberSubscribeMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.queue.subscribe", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSISubscriberSubscribeMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.queue.subscribe", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSISubscriberSubscribeMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshSubscriberSubscribeParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.Subscribe(ctx, parameters.Event)
}

func (that *meshPRSISubscriberSubscribeMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshSubscriberSubscribeParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.Subscribe(ctx, parameters.Event)
}
