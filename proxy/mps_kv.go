/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"
	"strings"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	proxympx "github.com/opendatav/mesh/client/golang/proxy"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/tool"
	"github.com/opendatav/mesh/client/golang/types"
	prsimmps "github.com/opendatav/mesh/plugin/prsim"
)

func init() {
	var service = &meshPRSIKVMPS{mps: new(prsimmps.PRSIKV)}
	var _ prsim.KV = service
	macro.Provide((*prsim.KV)(nil), service)

	var serviceGet = &meshPRSIKVGetMPS{service: service}
	var _ mpc.Invoker = serviceGet
	var _ macro.Caller = serviceGet
	macro.Provide(mpc.IInvoker, serviceGet)
	macro.Provide(macro.ICaller, serviceGet)

	var servicePut = &meshPRSIKVPutMPS{service: service}
	var _ mpc.Invoker = servicePut
	var _ macro.Caller = servicePut
	macro.Provide(mpc.IInvoker, servicePut)
	macro.Provide(macro.ICaller, servicePut)

	var serviceRemove = &meshPRSIKVRemoveMPS{service: service}
	var _ mpc.Invoker = serviceRemove
	var _ macro.Caller = serviceRemove
	macro.Provide(mpc.IInvoker, serviceRemove)
	macro.Provide(macro.ICaller, serviceRemove)

	var serviceKeys = &meshPRSIKVKeysMPS{service: service}
	var _ mpc.Invoker = serviceKeys
	var _ macro.Caller = serviceKeys
	macro.Provide(mpc.IInvoker, serviceKeys)
	macro.Provide(macro.ICaller, serviceKeys)

	var serviceIndex = &meshPRSIKVIndexMPS{service: service}
	var _ mpc.Invoker = serviceIndex
	var _ macro.Caller = serviceIndex
	macro.Provide(mpc.IInvoker, serviceIndex)
	macro.Provide(macro.ICaller, serviceIndex)

}

// meshPRSIKVMPS is an implementation of prsim.PRSIKV
type meshPRSIKVMPS struct {
	mps *prsimmps.PRSIKV
}

func (that *meshPRSIKVMPS) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshSPI}
}

func (that *meshPRSIKVMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: macro.MeshMPS}
}

// Get the value from kv store.
// @MPI("mesh.kv.get")
func (that *meshPRSIKVMPS) Get(ctx context.Context, key string) (*types.Entity, error) {
	return that.mps.Get(ctx, key)
}

// Put the value to kv store.
// @MPI("mesh.kv.put")
func (that *meshPRSIKVMPS) Put(ctx context.Context, key string, value *types.Entity) error {
	return that.mps.Put(ctx, key, value)
}

// Remove the kv store.
// @MPI("mesh.kv.remove")
func (that *meshPRSIKVMPS) Remove(ctx context.Context, key string) error {
	return that.mps.Remove(ctx, key)
}

// Keys with the pattern of kv store.
// @MPI("mesh.kv.keys")
func (that *meshPRSIKVMPS) Keys(ctx context.Context, pattern string) ([]string, error) {
	return that.mps.Keys(ctx, pattern)
}

// Index the kv for webui
// @MPI("mesh.kv.index")
func (that *meshPRSIKVMPS) Index(ctx context.Context, index *types.Paging) (*types.Page[*types.Entry], error) {
	return that.mps.Index(ctx, index)
}

type meshPRSIKVGetMPS struct {
	service prsim.KV
}

func (that *meshPRSIKVGetMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.kv.get", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIKVGetMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.kv.get", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIKVGetMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshKVGetParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Get(ctx, parameters.Key)
}

func (that *meshPRSIKVGetMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshKVGetParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Get(ctx, parameters.Key)
}

type meshPRSIKVPutMPS struct {
	service prsim.KV
}

func (that *meshPRSIKVPutMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.kv.put", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIKVPutMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.kv.put", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIKVPutMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshKVPutParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.Put(ctx, parameters.Key, parameters.Value)
}

func (that *meshPRSIKVPutMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshKVPutParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.Put(ctx, parameters.Key, parameters.Value)
}

type meshPRSIKVRemoveMPS struct {
	service prsim.KV
}

func (that *meshPRSIKVRemoveMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.kv.remove", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIKVRemoveMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.kv.remove", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIKVRemoveMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshKVRemoveParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.Remove(ctx, parameters.Key)
}

func (that *meshPRSIKVRemoveMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshKVRemoveParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.Remove(ctx, parameters.Key)
}

type meshPRSIKVKeysMPS struct {
	service prsim.KV
}

func (that *meshPRSIKVKeysMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.kv.keys", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIKVKeysMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.kv.keys", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIKVKeysMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshKVKeysParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Keys(ctx, parameters.Pattern)
}

func (that *meshPRSIKVKeysMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshKVKeysParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Keys(ctx, parameters.Pattern)
}

type meshPRSIKVIndexMPS struct {
	service prsim.KV
}

func (that *meshPRSIKVIndexMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.kv.index", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIKVIndexMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.kv.index", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIKVIndexMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshKVIndexParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Index(ctx, parameters.Index)
}

func (that *meshPRSIKVIndexMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshKVIndexParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Index(ctx, parameters.Index)
}
