/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"
	"strings"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	proxympx "github.com/opendatav/mesh/client/golang/proxy"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/tool"
	"github.com/opendatav/mesh/client/golang/types"
	_ "github.com/opendatav/mesh/plugin/nsq"
	prsimmps "github.com/opendatav/mesh/plugin/prsim"
)

func init() {
	var service = &meshPSRIPublisherMPS{mps: new(prsimmps.PSRIPublisher)}
	var _ prsim.Publisher = service
	macro.Provide((*prsim.Publisher)(nil), service)

	var servicePublish = &meshPSRIPublisherPublishMPS{service: service}
	var _ mpc.Invoker = servicePublish
	var _ macro.Caller = servicePublish
	macro.Provide(mpc.IInvoker, servicePublish)
	macro.Provide(macro.ICaller, servicePublish)

	var serviceBroadcast = &meshPSRIPublisherBroadcastMPS{service: service}
	var _ mpc.Invoker = serviceBroadcast
	var _ macro.Caller = serviceBroadcast
	macro.Provide(mpc.IInvoker, serviceBroadcast)
	macro.Provide(macro.ICaller, serviceBroadcast)

}

// meshPSRIPublisherMPS is an implementation of prsim.PSRIPublisher
type meshPSRIPublisherMPS struct {
	mps *prsimmps.PSRIPublisher
}

func (that *meshPSRIPublisherMPS) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshSPI}
}

func (that *meshPSRIPublisherMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: macro.MeshMPS}
}

// Publish
// @MPI("mesh.queue.publish")
func (that *meshPSRIPublisherMPS) Publish(ctx context.Context, events []*types.Event) ([]string, error) {
	return that.mps.Publish(ctx, events)
}

// Broadcast
// @MPI("mesh.queue.multicast")
func (that *meshPSRIPublisherMPS) Broadcast(ctx context.Context, events []*types.Event) ([]string, error) {
	return that.mps.Broadcast(ctx, events)
}

type meshPSRIPublisherPublishMPS struct {
	service prsim.Publisher
}

func (that *meshPSRIPublisherPublishMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.queue.publish", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPSRIPublisherPublishMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.queue.publish", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPSRIPublisherPublishMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshPublisherPublishParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Publish(ctx, parameters.Events)
}

func (that *meshPSRIPublisherPublishMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshPublisherPublishParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Publish(ctx, parameters.Events)
}

type meshPSRIPublisherBroadcastMPS struct {
	service prsim.Publisher
}

func (that *meshPSRIPublisherBroadcastMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.queue.multicast", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPSRIPublisherBroadcastMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.queue.multicast", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPSRIPublisherBroadcastMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshPublisherBroadcastParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Broadcast(ctx, parameters.Events)
}

func (that *meshPSRIPublisherBroadcastMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshPublisherBroadcastParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Broadcast(ctx, parameters.Events)
}
