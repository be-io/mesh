/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"
	"strings"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	proxympx "github.com/opendatav/mesh/client/golang/proxy"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/tool"
	"github.com/opendatav/mesh/client/golang/types"
	prsimmps "github.com/opendatav/mesh/plugin/prsim"
)

func init() {
	var service = &meshPRSIRegistryMPS{mps: new(prsimmps.PRSIRegistry)}
	var _ prsim.Registry = service
	macro.Provide((*prsim.Registry)(nil), service)

	var serviceRegister = &meshPRSIRegistryRegisterMPS{service: service}
	var _ mpc.Invoker = serviceRegister
	var _ macro.Caller = serviceRegister
	macro.Provide(mpc.IInvoker, serviceRegister)
	macro.Provide(macro.ICaller, serviceRegister)

	var serviceRegisters = &meshPRSIRegistryRegistersMPS{service: service}
	var _ mpc.Invoker = serviceRegisters
	var _ macro.Caller = serviceRegisters
	macro.Provide(mpc.IInvoker, serviceRegisters)
	macro.Provide(macro.ICaller, serviceRegisters)

	var serviceUnregister = &meshPRSIRegistryUnregisterMPS{service: service}
	var _ mpc.Invoker = serviceUnregister
	var _ macro.Caller = serviceUnregister
	macro.Provide(mpc.IInvoker, serviceUnregister)
	macro.Provide(macro.ICaller, serviceUnregister)

	var serviceExport = &meshPRSIRegistryExportMPS{service: service}
	var _ mpc.Invoker = serviceExport
	var _ macro.Caller = serviceExport
	macro.Provide(mpc.IInvoker, serviceExport)
	macro.Provide(macro.ICaller, serviceExport)

}

// meshPRSIRegistryMPS is an implementation of prsim.PRSIRegistry
type meshPRSIRegistryMPS struct {
	mps *prsimmps.PRSIRegistry
}

func (that *meshPRSIRegistryMPS) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshSPI}
}

func (that *meshPRSIRegistryMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: macro.MeshMPS}
}

// Register
// @MPI("mesh.registry.put")
func (that *meshPRSIRegistryMPS) Register(ctx context.Context, registration *types.Registration[any]) error {
	return that.mps.Register(ctx, registration)
}

// Registers
// @MPI("mesh.registry.puts")
func (that *meshPRSIRegistryMPS) Registers(ctx context.Context, registrations []*types.Registration[any]) error {
	return that.mps.Registers(ctx, registrations)
}

// Unregister
// @MPI("mesh.registry.remove")
func (that *meshPRSIRegistryMPS) Unregister(ctx context.Context, registration *types.Registration[any]) error {
	return that.mps.Unregister(ctx, registration)
}

// Export
// @MPI("mesh.registry.export")
func (that *meshPRSIRegistryMPS) Export(ctx context.Context, kind string) ([]*types.Registration[any], error) {
	return that.mps.Export(ctx, kind)
}

type meshPRSIRegistryRegisterMPS struct {
	service prsim.Registry
}

func (that *meshPRSIRegistryRegisterMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.registry.put", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIRegistryRegisterMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.registry.put", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIRegistryRegisterMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshRegistryRegisterParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.Register(ctx, parameters.Registration)
}

func (that *meshPRSIRegistryRegisterMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshRegistryRegisterParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.Register(ctx, parameters.Registration)
}

type meshPRSIRegistryRegistersMPS struct {
	service prsim.Registry
}

func (that *meshPRSIRegistryRegistersMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.registry.puts", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIRegistryRegistersMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.registry.puts", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIRegistryRegistersMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshRegistryRegistersParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.Registers(ctx, parameters.Registrations)
}

func (that *meshPRSIRegistryRegistersMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshRegistryRegistersParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.Registers(ctx, parameters.Registrations)
}

type meshPRSIRegistryUnregisterMPS struct {
	service prsim.Registry
}

func (that *meshPRSIRegistryUnregisterMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.registry.remove", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIRegistryUnregisterMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.registry.remove", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIRegistryUnregisterMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshRegistryUnregisterParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.Unregister(ctx, parameters.Registration)
}

func (that *meshPRSIRegistryUnregisterMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshRegistryUnregisterParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.Unregister(ctx, parameters.Registration)
}

type meshPRSIRegistryExportMPS struct {
	service prsim.Registry
}

func (that *meshPRSIRegistryExportMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.registry.export", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSIRegistryExportMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.registry.export", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSIRegistryExportMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshRegistryExportParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Export(ctx, parameters.Kind)
}

func (that *meshPRSIRegistryExportMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshRegistryExportParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Export(ctx, parameters.Kind)
}
