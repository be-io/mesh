/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"
	"strings"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	proxympx "github.com/opendatav/mesh/client/golang/proxy"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/tool"
	"github.com/opendatav/mesh/client/golang/types"
	_ "github.com/opendatav/mesh/plugin/cache"
	prsimmps "github.com/opendatav/mesh/plugin/prsim"
)

func init() {
	var service = &meshPRSICacheMPS{mps: new(prsimmps.PRSICache)}
	var _ prsim.Cache = service
	macro.Provide((*prsim.Cache)(nil), service)

	var serviceGet = &meshPRSICacheGetMPS{service: service}
	var _ mpc.Invoker = serviceGet
	var _ macro.Caller = serviceGet
	macro.Provide(mpc.IInvoker, serviceGet)
	macro.Provide(macro.ICaller, serviceGet)

	var servicePut = &meshPRSICachePutMPS{service: service}
	var _ mpc.Invoker = servicePut
	var _ macro.Caller = servicePut
	macro.Provide(mpc.IInvoker, servicePut)
	macro.Provide(macro.ICaller, servicePut)

	var serviceRemove = &meshPRSICacheRemoveMPS{service: service}
	var _ mpc.Invoker = serviceRemove
	var _ macro.Caller = serviceRemove
	macro.Provide(mpc.IInvoker, serviceRemove)
	macro.Provide(macro.ICaller, serviceRemove)

	var serviceIncr = &meshPRSICacheIncrMPS{service: service}
	var _ mpc.Invoker = serviceIncr
	var _ macro.Caller = serviceIncr
	macro.Provide(mpc.IInvoker, serviceIncr)
	macro.Provide(macro.ICaller, serviceIncr)

	var serviceDecr = &meshPRSICacheDecrMPS{service: service}
	var _ mpc.Invoker = serviceDecr
	var _ macro.Caller = serviceDecr
	macro.Provide(mpc.IInvoker, serviceDecr)
	macro.Provide(macro.ICaller, serviceDecr)

	var serviceKeys = &meshPRSICacheKeysMPS{service: service}
	var _ mpc.Invoker = serviceKeys
	var _ macro.Caller = serviceKeys
	macro.Provide(mpc.IInvoker, serviceKeys)
	macro.Provide(macro.ICaller, serviceKeys)

	var serviceHGet = &meshPRSICacheHGetMPS{service: service}
	var _ mpc.Invoker = serviceHGet
	var _ macro.Caller = serviceHGet
	macro.Provide(mpc.IInvoker, serviceHGet)
	macro.Provide(macro.ICaller, serviceHGet)

	var serviceHSet = &meshPRSICacheHSetMPS{service: service}
	var _ mpc.Invoker = serviceHSet
	var _ macro.Caller = serviceHSet
	macro.Provide(mpc.IInvoker, serviceHSet)
	macro.Provide(macro.ICaller, serviceHSet)

	var serviceHDel = &meshPRSICacheHDelMPS{service: service}
	var _ mpc.Invoker = serviceHDel
	var _ macro.Caller = serviceHDel
	macro.Provide(mpc.IInvoker, serviceHDel)
	macro.Provide(macro.ICaller, serviceHDel)

	var serviceHKeys = &meshPRSICacheHKeysMPS{service: service}
	var _ mpc.Invoker = serviceHKeys
	var _ macro.Caller = serviceHKeys
	macro.Provide(mpc.IInvoker, serviceHKeys)
	macro.Provide(macro.ICaller, serviceHKeys)

}

// meshPRSICacheMPS is an implementation of prsim.PRSICache
type meshPRSICacheMPS struct {
	mps *prsimmps.PRSICache
}

func (that *meshPRSICacheMPS) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshSPI}
}

func (that *meshPRSICacheMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: macro.MeshMPS}
}

// Get the value from cache.
// @MPI("mesh.cache.get")
func (that *meshPRSICacheMPS) Get(ctx context.Context, key string) (*types.CacheEntity, error) {
	return that.mps.Get(ctx, key)
}

// Put the value to cache.
// @MPI("mesh.cache.put")
func (that *meshPRSICacheMPS) Put(ctx context.Context, cell *types.CacheEntity) error {
	return that.mps.Put(ctx, cell)
}

// Remove the cache value.
// @MPI("mesh.cache.remove")
func (that *meshPRSICacheMPS) Remove(ctx context.Context, key string) error {
	return that.mps.Remove(ctx, key)
}

// Incr the cache of expire time.
// @MPI("mesh.cache.incr")
func (that *meshPRSICacheMPS) Incr(ctx context.Context, key string, value int64) (int64, error) {
	return that.mps.Incr(ctx, key, value)
}

// Decr the cache of expire time.
// @MPI("mesh.cache.decr")
func (that *meshPRSICacheMPS) Decr(ctx context.Context, key string, value int64) (int64, error) {
	return that.mps.Decr(ctx, key, value)
}

// Keys the cache key set.
// @MPI("mesh.cache.keys")
func (that *meshPRSICacheMPS) Keys(ctx context.Context, pattern string) ([]string, error) {
	return that.mps.Keys(ctx, pattern)
}

// HGet get value in hash
// @MPI("mesh.cache.hget")
func (that *meshPRSICacheMPS) HGet(ctx context.Context, key string, name string) (*types.CacheEntity, error) {
	return that.mps.HGet(ctx, key, name)
}

// HSet put value in hash
// @MPI("mesh.cache.hset")
func (that *meshPRSICacheMPS) HSet(ctx context.Context, key string, cell *types.CacheEntity) error {
	return that.mps.HSet(ctx, key, cell)
}

// HDel put value in hash
// @MPI("mesh.cache.hdel")
func (that *meshPRSICacheMPS) HDel(ctx context.Context, key string, name string) error {
	return that.mps.HDel(ctx, key, name)
}

// HKeys get the hash keys
// @MPI("mesh.cache.hkeys")
func (that *meshPRSICacheMPS) HKeys(ctx context.Context, key string) ([]string, error) {
	return that.mps.HKeys(ctx, key)
}

type meshPRSICacheGetMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheGetMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.get", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheGetMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.get", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheGetMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheGetParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Get(ctx, parameters.Key)
}

func (that *meshPRSICacheGetMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheGetParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Get(ctx, parameters.Key)
}

type meshPRSICachePutMPS struct {
	service prsim.Cache
}

func (that *meshPRSICachePutMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.put", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICachePutMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.put", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICachePutMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCachePutParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.Put(ctx, parameters.Cell)
}

func (that *meshPRSICachePutMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCachePutParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.Put(ctx, parameters.Cell)
}

type meshPRSICacheRemoveMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheRemoveMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.remove", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheRemoveMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.remove", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheRemoveMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheRemoveParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.Remove(ctx, parameters.Key)
}

func (that *meshPRSICacheRemoveMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheRemoveParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.Remove(ctx, parameters.Key)
}

type meshPRSICacheIncrMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheIncrMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.incr", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheIncrMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.incr", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheIncrMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheIncrParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Incr(ctx, parameters.Key, parameters.Value)
}

func (that *meshPRSICacheIncrMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheIncrParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Incr(ctx, parameters.Key, parameters.Value)
}

type meshPRSICacheDecrMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheDecrMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.decr", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheDecrMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.decr", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheDecrMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheDecrParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Decr(ctx, parameters.Key, parameters.Value)
}

func (that *meshPRSICacheDecrMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheDecrParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Decr(ctx, parameters.Key, parameters.Value)
}

type meshPRSICacheKeysMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheKeysMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.keys", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheKeysMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.keys", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheKeysMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheKeysParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Keys(ctx, parameters.Pattern)
}

func (that *meshPRSICacheKeysMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheKeysParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Keys(ctx, parameters.Pattern)
}

type meshPRSICacheHGetMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheHGetMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.hget", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheHGetMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.hget", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheHGetMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheHGetParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.HGet(ctx, parameters.Key, parameters.Name)
}

func (that *meshPRSICacheHGetMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheHGetParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.HGet(ctx, parameters.Key, parameters.Name)
}

type meshPRSICacheHSetMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheHSetMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.hset", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheHSetMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.hset", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheHSetMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheHSetParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.HSet(ctx, parameters.Key, parameters.Cell)
}

func (that *meshPRSICacheHSetMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheHSetParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.HSet(ctx, parameters.Key, parameters.Cell)
}

type meshPRSICacheHDelMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheHDelMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.hdel", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheHDelMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.hdel", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheHDelMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheHDelParameters)
	parameters.SetArguments(ctx, args...)
	return nil, that.service.HDel(ctx, parameters.Key, parameters.Name)
}

func (that *meshPRSICacheHDelMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheHDelParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return nil, that.service.HDel(ctx, parameters.Key, parameters.Name)
}

type meshPRSICacheHKeysMPS struct {
	service prsim.Cache
}

func (that *meshPRSICacheHKeysMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("mesh.cache.hkeys", "${mesh.name}", tool.Name.Get())}
}
func (that *meshPRSICacheHKeysMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("mesh.cache.hkeys", "${mesh.name}", tool.Name.Get())}
}

func (that *meshPRSICacheHKeysMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(proxympx.MeshCacheHKeysParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.HKeys(ctx, parameters.Key)
}

func (that *meshPRSICacheHKeysMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*proxympx.MeshCacheHKeysParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.HKeys(ctx, parameters.Key)
}
