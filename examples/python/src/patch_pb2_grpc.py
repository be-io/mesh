# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import patch_pb2 as patch__pb2


class DataTransferServiceStub(object):
    """data transfer service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.push = channel.stream_unary(
                '/com.be.cube.core.networking.proxy.DataTransferService/push',
                request_serializer=patch__pb2.Packet.SerializeToString,
                response_deserializer=patch__pb2.ServerSummary.FromString,
                )
        self.pull = channel.unary_unary(
                '/com.be.cube.core.networking.proxy.DataTransferService/pull',
                request_serializer=patch__pb2.Metadata.SerializeToString,
                response_deserializer=patch__pb2.Packet.FromString,
                )
        self.unaryCall = channel.unary_unary(
                '/com.be.cube.core.networking.proxy.DataTransferService/unaryCall',
                request_serializer=patch__pb2.Packet.SerializeToString,
                response_deserializer=patch__pb2.Packet.FromString,
                )


class DataTransferServiceServicer(object):
    """data transfer service
    """

    def push(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unaryCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataTransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'push': grpc.stream_unary_rpc_method_handler(
                    servicer.push,
                    request_deserializer=patch__pb2.Packet.FromString,
                    response_serializer=patch__pb2.ServerSummary.SerializeToString,
            ),
            'pull': grpc.unary_unary_rpc_method_handler(
                    servicer.pull,
                    request_deserializer=patch__pb2.Metadata.FromString,
                    response_serializer=patch__pb2.Packet.SerializeToString,
            ),
            'unaryCall': grpc.unary_unary_rpc_method_handler(
                    servicer.unaryCall,
                    request_deserializer=patch__pb2.Packet.FromString,
                    response_serializer=patch__pb2.Packet.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.be.cube.core.networking.proxy.DataTransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataTransferService(object):
    """data transfer service
    """

    @staticmethod
    def push(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/com.be.cube.core.networking.proxy.DataTransferService/push',
            patch__pb2.Packet.SerializeToString,
            patch__pb2.ServerSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.be.cube.core.networking.proxy.DataTransferService/pull',
            patch__pb2.Metadata.SerializeToString,
            patch__pb2.Packet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unaryCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.be.cube.core.networking.proxy.DataTransferService/unaryCall',
            patch__pb2.Packet.SerializeToString,
            patch__pb2.Packet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
