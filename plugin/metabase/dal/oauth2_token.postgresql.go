// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: oauth2_token.sql

package dal

import "context"

const DeleteTokenPostgresql = `-- name: DeleteToken :exec
DELETE FROM oauth2_token WHERE "code" = $1
`

func (q *PostgresqlAccess) DeleteToken(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, DeleteTokenPostgresql, code)
	return err
}

const IndexTokenPostgresql = `-- name: IndexToken :many
SELECT code, access, refresh, data, create_at, expire_at FROM oauth2_token ORDER BY "code" ASC LIMIT $1 OFFSET $2
`

func (q *PostgresqlAccess) IndexToken(ctx context.Context, arg *IndexTokenParams) ([]*Oauth2Token, error) {
	rows, err := q.db.QueryContext(ctx, IndexTokenPostgresql, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Oauth2Token
	for rows.Next() {
		var i Oauth2Token
		if err := rows.Scan(
			&i.Code,
			&i.Access,
			&i.Refresh,
			&i.Data,
			&i.CreateAt,
			&i.ExpireAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertTokenPostgresql = `-- name: InsertToken :execrows
INSERT INTO oauth2_token ("create_at", "expire_at", "code", "access", "refresh", "data")
VALUES ($1, $2, $3, $4, $5, $6)
`

func (q *PostgresqlAccess) InsertToken(ctx context.Context, arg *InsertTokenParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, InsertTokenPostgresql,
		arg.CreateAt,
		arg.ExpireAt,
		arg.Code,
		arg.Access,
		arg.Refresh,
		arg.Data,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
