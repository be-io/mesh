// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: kv.sql

package dal

import "context"

const DeleteKVMysql = `-- name: DeleteKV :execrows
DELETE FROM ` + "`" + `kv` + "`" + ` WHERE ` + "`" + `key` + "`" + ` = ?
`

func (q *MysqlAccess) DeleteKV(ctx context.Context, key string) (int64, error) {
	result, err := q.exec(ctx, q.deleteKVStmt, DeleteKVMysql, key)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const IndexKVMysql = `-- name: IndexKV :many
SELECT ` + "`" + `key` + "`" + `, value, create_at, update_at, create_by, update_by FROM ` + "`" + `kv` + "`" + ` ORDER BY ` + "`" + `key` + "`" + ` ASC LIMIT ?, ?
`

func (q *MysqlAccess) IndexKV(ctx context.Context, arg *IndexKVParams) ([]*Kv, error) {
	rows, err := q.query(ctx, q.indexKVStmt, IndexKVMysql, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Kv
	for rows.Next() {
		var i Kv
		if err := rows.Scan(
			&i.Key,
			&i.Value,
			&i.CreateAt,
			&i.UpdateAt,
			&i.CreateBy,
			&i.UpdateBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertKVMysql = `-- name: InsertKV :execrows
INSERT INTO ` + "`" + `kv` + "`" + ` (` + "`" + `key` + "`" + `, ` + "`" + `value` + "`" + `, ` + "`" + `create_at` + "`" + `, ` + "`" + `update_at` + "`" + `, ` + "`" + `create_by` + "`" + `, ` + "`" + `update_by` + "`" + `)
VALUES (?, ?, ?, ?, ?, ?)
`

func (q *MysqlAccess) InsertKV(ctx context.Context, arg *InsertKVParams) (int64, error) {
	result, err := q.exec(ctx, q.insertKVStmt, InsertKVMysql,
		arg.Key,
		arg.Value,
		arg.CreateAt,
		arg.UpdateAt,
		arg.CreateBy,
		arg.UpdateBy,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
