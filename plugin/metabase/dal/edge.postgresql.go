// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: edge.sql

package dal

import "context"

const DeleteEdgePostgresql = `-- name: DeleteEdge :exec
DELETE FROM edge WHERE "node_id" = $1
`

func (q *PostgresqlAccess) DeleteEdge(ctx context.Context, nodeID string) error {
	_, err := q.db.ExecContext(ctx, DeleteEdgePostgresql, nodeID)
	return err
}

const IndexEdgePostgresql = `-- name: IndexEdge :many
SELECT id, node_id, inst_id, inst_name, address, describe, certificate, status, version, auth_code, extra, expire_at, create_at, update_at, create_by, update_by, "group" FROM edge ORDER BY "node_id" ASC LIMIT $1 OFFSET $2
`

func (q *PostgresqlAccess) IndexEdge(ctx context.Context, arg *IndexEdgeParams) ([]*Edge, error) {
	rows, err := q.db.QueryContext(ctx, IndexEdgePostgresql, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Edge
	for rows.Next() {
		var i Edge
		if err := rows.Scan(
			&i.ID,
			&i.NodeID,
			&i.InstID,
			&i.InstName,
			&i.Address,
			&i.Describe,
			&i.Certificate,
			&i.Status,
			&i.Version,
			&i.AuthCode,
			&i.Extra,
			&i.ExpireAt,
			&i.CreateAt,
			&i.UpdateAt,
			&i.CreateBy,
			&i.UpdateBy,
			&i.Group,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertEdgePostgresql = `-- name: InsertEdge :execrows
INSERT INTO edge ("node_id", "inst_id", "inst_name", "address", "describe", "certificate", "status", "version",
                          "auth_code", "extra", "expire_at", "create_at", "update_at", "create_by", "update_by",
                          "group")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
`

func (q *PostgresqlAccess) InsertEdge(ctx context.Context, arg *InsertEdgeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, InsertEdgePostgresql,
		arg.NodeID,
		arg.InstID,
		arg.InstName,
		arg.Address,
		arg.Describe,
		arg.Certificate,
		arg.Status,
		arg.Version,
		arg.AuthCode,
		arg.Extra,
		arg.ExpireAt,
		arg.CreateAt,
		arg.UpdateAt,
		arg.CreateBy,
		arg.UpdateBy,
		arg.Group,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
