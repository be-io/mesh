// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package dal

import (
	"database/sql"
	"io"
	"time"

	"context"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

type DAL interface {
	io.Closer
	DeleteClient(ctx context.Context, id string) error
	DeleteEdge(ctx context.Context, nodeID string) error
	DeleteKV(ctx context.Context, key string) (int64, error)
	DeleteToken(ctx context.Context, code string) error
	GetSequenceByKind(ctx context.Context, kind string) (*Sequence, error)
	GetSequenceByKindForUpdate(ctx context.Context, kind string) (*Sequence, error)
	IndexClient(ctx context.Context, arg *IndexClientParams) ([]*Oauth2Client, error)
	IndexEdge(ctx context.Context, arg *IndexEdgeParams) ([]*Edge, error)
	IndexKV(ctx context.Context, arg *IndexKVParams) ([]*Kv, error)
	IndexToken(ctx context.Context, arg *IndexTokenParams) ([]*Oauth2Token, error)
	InsertClient(ctx context.Context, arg *InsertClientParams) (int64, error)
	InsertEdge(ctx context.Context, arg *InsertEdgeParams) (int64, error)
	InsertKV(ctx context.Context, arg *InsertKVParams) (int64, error)
	InsertSequence(ctx context.Context, arg *InsertSequenceParams) (int64, error)
	InsertToken(ctx context.Context, arg *InsertTokenParams) (int64, error)
	SetSequenceMin(ctx context.Context, arg *SetSequenceMinParams) (int64, error)
}

type IndexClientParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type IndexEdgeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type IndexKVParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type IndexTokenParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type InsertClientParams struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	Secret string `json:"secret"`
	Domain string `json:"domain"`
	Data   string `json:"data"`
}

type InsertEdgeParams struct {
	NodeID      string    `json:"node_id"`
	InstID      string    `json:"inst_id"`
	InstName    string    `json:"inst_name"`
	Address     string    `json:"address"`
	Describe    string    `json:"describe"`
	Certificate string    `json:"certificate"`
	Status      int32     `json:"status"`
	Version     int32     `json:"version"`
	AuthCode    string    `json:"auth_code"`
	Extra       string    `json:"extra"`
	ExpireAt    time.Time `json:"expire_at"`
	CreateAt    time.Time `json:"create_at"`
	UpdateAt    time.Time `json:"update_at"`
	CreateBy    string    `json:"create_by"`
	UpdateBy    string    `json:"update_by"`
	Group       string    `json:"group"`
}

type InsertKVParams struct {
	Key      string    `json:"key"`
	Value    string    `json:"value"`
	CreateAt time.Time `json:"create_at"`
	UpdateAt time.Time `json:"update_at"`
	CreateBy string    `json:"create_by"`
	UpdateBy string    `json:"update_by"`
}

type InsertSequenceParams struct {
	Kind     string    `json:"kind"`
	Min      int64     `json:"min"`
	Max      int64     `json:"max"`
	Size     int32     `json:"size"`
	Length   int32     `json:"length"`
	Status   int32     `json:"status"`
	Version  int32     `json:"version"`
	CreateAt time.Time `json:"create_at"`
	UpdateAt time.Time `json:"update_at"`
}

type InsertTokenParams struct {
	CreateAt time.Time `json:"create_at"`
	ExpireAt time.Time `json:"expire_at"`
	Code     string    `json:"code"`
	Access   string    `json:"access"`
	Refresh  string    `json:"refresh"`
	Data     string    `json:"data"`
}

type SetSequenceMinParams struct {
	Min     int64  `json:"min"`
	Kind    string `json:"kind"`
	Version int32  `json:"version"`
}
