// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: edge.sql

package dal

import "context"

const DeleteEdgeMysql = `-- name: DeleteEdge :exec
DELETE FROM ` + "`" + `edge` + "`" + ` WHERE ` + "`" + `node_id` + "`" + ` = ?
`

func (q *MysqlAccess) DeleteEdge(ctx context.Context, nodeID string) error {
	_, err := q.exec(ctx, q.deleteEdgeStmt, DeleteEdgeMysql, nodeID)
	return err
}

const IndexEdgeMysql = `-- name: IndexEdge :many
SELECT id, node_id, inst_id, inst_name, address, ` + "`" + `describe` + "`" + `, certificate, status, version, auth_code, extra, expire_at, create_at, update_at, create_by, update_by, ` + "`" + `group` + "`" + ` FROM ` + "`" + `edge` + "`" + ` ORDER BY ` + "`" + `node_id` + "`" + ` ASC LIMIT ?, ?
`

func (q *MysqlAccess) IndexEdge(ctx context.Context, arg *IndexEdgeParams) ([]*Edge, error) {
	rows, err := q.query(ctx, q.indexEdgeStmt, IndexEdgeMysql, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Edge
	for rows.Next() {
		var i Edge
		if err := rows.Scan(
			&i.ID,
			&i.NodeID,
			&i.InstID,
			&i.InstName,
			&i.Address,
			&i.Describe,
			&i.Certificate,
			&i.Status,
			&i.Version,
			&i.AuthCode,
			&i.Extra,
			&i.ExpireAt,
			&i.CreateAt,
			&i.UpdateAt,
			&i.CreateBy,
			&i.UpdateBy,
			&i.Group,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertEdgeMysql = `-- name: InsertEdge :execrows
INSERT INTO edge (` + "`" + `node_id` + "`" + `, ` + "`" + `inst_id` + "`" + `, ` + "`" + `inst_name` + "`" + `, ` + "`" + `address` + "`" + `, ` + "`" + `describe` + "`" + `, ` + "`" + `certificate` + "`" + `, ` + "`" + `status` + "`" + `, ` + "`" + `version` + "`" + `,
                  ` + "`" + `auth_code` + "`" + `, ` + "`" + `extra` + "`" + `, ` + "`" + `expire_at` + "`" + `, ` + "`" + `create_at` + "`" + `, ` + "`" + `update_at` + "`" + `, ` + "`" + `create_by` + "`" + `, ` + "`" + `update_by` + "`" + `, ` + "`" + `group` + "`" + `)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

func (q *MysqlAccess) InsertEdge(ctx context.Context, arg *InsertEdgeParams) (int64, error) {
	result, err := q.exec(ctx, q.insertEdgeStmt, InsertEdgeMysql,
		arg.NodeID,
		arg.InstID,
		arg.InstName,
		arg.Address,
		arg.Describe,
		arg.Certificate,
		arg.Status,
		arg.Version,
		arg.AuthCode,
		arg.Extra,
		arg.ExpireAt,
		arg.CreateAt,
		arg.UpdateAt,
		arg.CreateBy,
		arg.UpdateBy,
		arg.Group,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
