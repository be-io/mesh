// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: sequence.sql

package dal

import "context"

const GetSequenceByKindPostgresql = `-- name: GetSequenceByKind :one
SELECT kind, min, max, size, length, status, version, create_at, update_at
FROM sequence
WHERE "kind" = $1
`

func (q *PostgresqlAccess) GetSequenceByKind(ctx context.Context, kind string) (*Sequence, error) {
	row := q.db.QueryRowContext(ctx, GetSequenceByKindPostgresql, kind)
	var i Sequence
	err := row.Scan(
		&i.Kind,
		&i.Min,
		&i.Max,
		&i.Size,
		&i.Length,
		&i.Status,
		&i.Version,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return &i, err
}

const GetSequenceByKindForUpdatePostgresql = `-- name: GetSequenceByKindForUpdate :one
SELECT kind, min, max, size, length, status, version, create_at, update_at
FROM sequence
WHERE "kind" = $1 FOR UPDATE
`

func (q *PostgresqlAccess) GetSequenceByKindForUpdate(ctx context.Context, kind string) (*Sequence, error) {
	row := q.db.QueryRowContext(ctx, GetSequenceByKindForUpdatePostgresql, kind)
	var i Sequence
	err := row.Scan(
		&i.Kind,
		&i.Min,
		&i.Max,
		&i.Size,
		&i.Length,
		&i.Status,
		&i.Version,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return &i, err
}

const InsertSequencePostgresql = `-- name: InsertSequence :execrows
INSERT INTO sequence ("kind", "min", "max", "size", "length", "status", "version", "create_at", "update_at")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

func (q *PostgresqlAccess) InsertSequence(ctx context.Context, arg *InsertSequenceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, InsertSequencePostgresql,
		arg.Kind,
		arg.Min,
		arg.Max,
		arg.Size,
		arg.Length,
		arg.Status,
		arg.Version,
		arg.CreateAt,
		arg.UpdateAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const SetSequenceMinPostgresql = `-- name: SetSequenceMin :execrows
UPDATE sequence
SET "min"     = $1,
    "version" = "version" + 1
WHERE "kind" = $2
  AND "version" = $3
`

func (q *PostgresqlAccess) SetSequenceMin(ctx context.Context, arg *SetSequenceMinParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, SetSequenceMinPostgresql, arg.Min, arg.Kind, arg.Version)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
