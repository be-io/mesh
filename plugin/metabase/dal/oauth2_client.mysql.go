// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: oauth2_client.sql

package dal

import "context"

const DeleteClientMysql = `-- name: DeleteClient :exec
DELETE FROM oauth2_client WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *MysqlAccess) DeleteClient(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteClientStmt, DeleteClientMysql, id)
	return err
}

const IndexClientMysql = `-- name: IndexClient :many
SELECT id, name, secret, domain, data FROM ` + "`" + `oauth2_client` + "`" + ` ORDER BY ` + "`" + `id` + "`" + ` ASC LIMIT ?, ?
`

func (q *MysqlAccess) IndexClient(ctx context.Context, arg *IndexClientParams) ([]*Oauth2Client, error) {
	rows, err := q.query(ctx, q.indexClientStmt, IndexClientMysql, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Oauth2Client
	for rows.Next() {
		var i Oauth2Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Secret,
			&i.Domain,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertClientMysql = `-- name: InsertClient :execrows
INSERT INTO oauth2_client (` + "`" + `id` + "`" + `, ` + "`" + `name` + "`" + `, ` + "`" + `secret` + "`" + `, ` + "`" + `domain` + "`" + `, ` + "`" + `data` + "`" + `)
VALUES (?, ?, ?, ?, ?)
`

func (q *MysqlAccess) InsertClient(ctx context.Context, arg *InsertClientParams) (int64, error) {
	result, err := q.exec(ctx, q.insertClientStmt, InsertClientMysql,
		arg.ID,
		arg.Name,
		arg.Secret,
		arg.Domain,
		arg.Data,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
