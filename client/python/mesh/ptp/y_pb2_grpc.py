# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import y_pb2 as y__pb2


class PrivateTransferTransportStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.peek = channel.unary_unary(
                '/org.ppc.ptp.PrivateTransferTransport/peek',
                request_serializer=y__pb2.PeekInbound.SerializeToString,
                response_deserializer=y__pb2.TransportOutbound.FromString,
                )
        self.pop = channel.unary_unary(
                '/org.ppc.ptp.PrivateTransferTransport/pop',
                request_serializer=y__pb2.PopInbound.SerializeToString,
                response_deserializer=y__pb2.TransportOutbound.FromString,
                )
        self.push = channel.unary_unary(
                '/org.ppc.ptp.PrivateTransferTransport/push',
                request_serializer=y__pb2.PushInbound.SerializeToString,
                response_deserializer=y__pb2.TransportOutbound.FromString,
                )
        self.release = channel.unary_unary(
                '/org.ppc.ptp.PrivateTransferTransport/release',
                request_serializer=y__pb2.ReleaseInbound.SerializeToString,
                response_deserializer=y__pb2.TransportOutbound.FromString,
                )


class PrivateTransferTransportServicer(object):
    """Missing associated documentation comment in .proto file."""

    def peek(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def push(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def release(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrivateTransferTransportServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'peek': grpc.unary_unary_rpc_method_handler(
                    servicer.peek,
                    request_deserializer=y__pb2.PeekInbound.FromString,
                    response_serializer=y__pb2.TransportOutbound.SerializeToString,
            ),
            'pop': grpc.unary_unary_rpc_method_handler(
                    servicer.pop,
                    request_deserializer=y__pb2.PopInbound.FromString,
                    response_serializer=y__pb2.TransportOutbound.SerializeToString,
            ),
            'push': grpc.unary_unary_rpc_method_handler(
                    servicer.push,
                    request_deserializer=y__pb2.PushInbound.FromString,
                    response_serializer=y__pb2.TransportOutbound.SerializeToString,
            ),
            'release': grpc.unary_unary_rpc_method_handler(
                    servicer.release,
                    request_deserializer=y__pb2.ReleaseInbound.FromString,
                    response_serializer=y__pb2.TransportOutbound.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.ppc.ptp.PrivateTransferTransport', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrivateTransferTransport(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def peek(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.ppc.ptp.PrivateTransferTransport/peek',
            y__pb2.PeekInbound.SerializeToString,
            y__pb2.TransportOutbound.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.ppc.ptp.PrivateTransferTransport/pop',
            y__pb2.PopInbound.SerializeToString,
            y__pb2.TransportOutbound.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def push(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.ppc.ptp.PrivateTransferTransport/push',
            y__pb2.PushInbound.SerializeToString,
            y__pb2.TransportOutbound.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def release(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.ppc.ptp.PrivateTransferTransport/release',
            y__pb2.ReleaseInbound.SerializeToString,
            y__pb2.TransportOutbound.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
