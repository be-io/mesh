/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/types"
	"golang.org/x/net/context"
)

func init() {
	var _ macro.Interface = new(meshOperateSystemMPI)
	macro.Provide((*prsim.OperateSystem)(nil), &meshOperateSystemMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Install": {
				DeclaredKind: (*prsim.OperateSystem)(nil),
				TName:        "prsim.OperateSystem",
				Name:         "Install",
				Intype:       func() macro.Parameters { var parameters MeshOperateSystemInstallParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshOperateSystemInstallReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshOperateSystemInstallParameters) },
				Outbound:     func() macro.Returns { return new(MeshOperateSystemInstallReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.os.install"},
				},
			},
			"Uninstall": {
				DeclaredKind: (*prsim.OperateSystem)(nil),
				TName:        "prsim.OperateSystem",
				Name:         "Uninstall",
				Intype:       func() macro.Parameters { var parameters MeshOperateSystemUninstallParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshOperateSystemUninstallReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshOperateSystemUninstallParameters) },
				Outbound:     func() macro.Returns { return new(MeshOperateSystemUninstallReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.os.uninstall"},
				},
			},
			"Index": {
				DeclaredKind: (*prsim.OperateSystem)(nil),
				TName:        "prsim.OperateSystem",
				Name:         "Index",
				Intype:       func() macro.Parameters { var parameters MeshOperateSystemIndexParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshOperateSystemIndexReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshOperateSystemIndexParameters) },
				Outbound:     func() macro.Returns { return new(MeshOperateSystemIndexReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.os.index"},
				},
			},
		},
	})
}

// meshOperateSystemMPI is an implementation of OperateSystem
type meshOperateSystemMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshOperateSystemMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshOperateSystemMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshOperateSystemMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Install apps.
// @MPI("mesh.os.install")
func (that *meshOperateSystemMPI) Install(ctx context.Context, chart *types.OSCharts) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Install"], chart)
	return err
}

// Uninstall apps.
// @MPI("mesh.os.uninstall")
func (that *meshOperateSystemMPI) Uninstall(ctx context.Context, chart *types.OSCharts) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Uninstall"], chart)
	return err
}

// Index apps.
// @MPI("mesh.os.index")
func (that *meshOperateSystemMPI) Index(ctx context.Context) (*types.Page[*types.OSCharts], error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Index"])
	if nil != err {
		x := new(MeshOperateSystemIndexReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshOperateSystemIndexReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshOperateSystemIndexReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshOperateSystemInstallParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Chart       *types.OSCharts   `index:"0" json:"chart" xml:"chart" yaml:"chart"`
}

func (that *MeshOperateSystemInstallParameters) GetKind() interface{} {
	return new(MeshOperateSystemInstallParameters)
}

func (that *MeshOperateSystemInstallParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Chart)
	return arguments
}

func (that *MeshOperateSystemInstallParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Chart = arguments[0].(*types.OSCharts)
		}
	}
}

func (that *MeshOperateSystemInstallParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshOperateSystemInstallParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshOperateSystemInstallReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshOperateSystemInstallReturns) GetCode() string {
	return that.Code
}

func (that *MeshOperateSystemInstallReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshOperateSystemInstallReturns) GetMessage() string {
	return that.Message
}

func (that *MeshOperateSystemInstallReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshOperateSystemInstallReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshOperateSystemInstallReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshOperateSystemInstallReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshOperateSystemInstallReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshOperateSystemUninstallParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Chart       *types.OSCharts   `index:"0" json:"chart" xml:"chart" yaml:"chart"`
}

func (that *MeshOperateSystemUninstallParameters) GetKind() interface{} {
	return new(MeshOperateSystemUninstallParameters)
}

func (that *MeshOperateSystemUninstallParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Chart)
	return arguments
}

func (that *MeshOperateSystemUninstallParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Chart = arguments[0].(*types.OSCharts)
		}
	}
}

func (that *MeshOperateSystemUninstallParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshOperateSystemUninstallParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshOperateSystemUninstallReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshOperateSystemUninstallReturns) GetCode() string {
	return that.Code
}

func (that *MeshOperateSystemUninstallReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshOperateSystemUninstallReturns) GetMessage() string {
	return that.Message
}

func (that *MeshOperateSystemUninstallReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshOperateSystemUninstallReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshOperateSystemUninstallReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshOperateSystemUninstallReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshOperateSystemUninstallReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshOperateSystemIndexParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshOperateSystemIndexParameters) GetKind() interface{} {
	return new(MeshOperateSystemIndexParameters)
}

func (that *MeshOperateSystemIndexParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshOperateSystemIndexParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshOperateSystemIndexParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshOperateSystemIndexParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshOperateSystemIndexReturns struct {
	Code    string                       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string                       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause                 `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Page[*types.OSCharts] `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshOperateSystemIndexReturns) GetCode() string {
	return that.Code
}

func (that *MeshOperateSystemIndexReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshOperateSystemIndexReturns) GetMessage() string {
	return that.Message
}

func (that *MeshOperateSystemIndexReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshOperateSystemIndexReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshOperateSystemIndexReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshOperateSystemIndexReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshOperateSystemIndexReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Page[*types.OSCharts])
		}
	}
}
