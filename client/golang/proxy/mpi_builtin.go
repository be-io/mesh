/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/types"
)

func init() {
	var _ macro.Interface = new(meshBuiltinMPI)
	macro.Provide((*prsim.Builtin)(nil), &meshBuiltinMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Doc": {
				DeclaredKind: (*prsim.Builtin)(nil),
				TName:        "prsim.Builtin",
				Name:         "Doc",
				Intype:       func() macro.Parameters { var parameters MeshBuiltinDocParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshBuiltinDocReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshBuiltinDocParameters) },
				Outbound:     func() macro.Returns { return new(MeshBuiltinDocReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "${mesh.name}.builtin.doc"},
				},
			},
			"Version": {
				DeclaredKind: (*prsim.Builtin)(nil),
				TName:        "prsim.Builtin",
				Name:         "Version",
				Intype:       func() macro.Parameters { var parameters MeshBuiltinVersionParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshBuiltinVersionReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshBuiltinVersionParameters) },
				Outbound:     func() macro.Returns { return new(MeshBuiltinVersionReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "${mesh.name}.builtin.version"},
				},
			},
			"Debug": {
				DeclaredKind: (*prsim.Builtin)(nil),
				TName:        "prsim.Builtin",
				Name:         "Debug",
				Intype:       func() macro.Parameters { var parameters MeshBuiltinDebugParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshBuiltinDebugReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshBuiltinDebugParameters) },
				Outbound:     func() macro.Returns { return new(MeshBuiltinDebugReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "${mesh.name}.builtin.debug"},
				},
			},
			"Stats": {
				DeclaredKind: (*prsim.Builtin)(nil),
				TName:        "prsim.Builtin",
				Name:         "Stats",
				Intype:       func() macro.Parameters { var parameters MeshBuiltinStatsParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshBuiltinStatsReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshBuiltinStatsParameters) },
				Outbound:     func() macro.Returns { return new(MeshBuiltinStatsReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "${mesh.name}.builtin.stats"},
				},
			},
			"Fallback": {
				DeclaredKind: (*prsim.Builtin)(nil),
				TName:        "prsim.Builtin",
				Name:         "Fallback",
				Intype:       func() macro.Parameters { var parameters MeshBuiltinFallbackParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshBuiltinFallbackReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshBuiltinFallbackParameters) },
				Outbound:     func() macro.Returns { return new(MeshBuiltinFallbackReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "${mesh.name}.builtin.fallback"},
				},
			},
		},
	})
}

// meshBuiltinMPI is an implementation of Builtin
type meshBuiltinMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshBuiltinMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshBuiltinMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshBuiltinMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Doc export the documents.
// @MPI("${mesh.name}.builtin.doc")
func (that *meshBuiltinMPI) Doc(ctx context.Context, name string, formatter string) (string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Doc"], name, formatter)
	if nil != err {
		x := new(MeshBuiltinDocReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshBuiltinDocReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshBuiltinDocReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Version will get the builtin application version.
// @MPI("${mesh.name}.builtin.version")
func (that *meshBuiltinMPI) Version(ctx context.Context) (*types.Versions, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Version"])
	if nil != err {
		x := new(MeshBuiltinVersionReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshBuiltinVersionReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshBuiltinVersionReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Debug set the application log level.
// @MPI("${mesh.name}.builtin.debug")
func (that *meshBuiltinMPI) Debug(ctx context.Context, features map[string]string) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Debug"], features)
	return err
}

// Stats will collect health check stats.
// @MPI("${mesh.name}.builtin.stats")
func (that *meshBuiltinMPI) Stats(ctx context.Context, features []string) (map[string]string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Stats"], features)
	if nil != err {
		x := new(MeshBuiltinStatsReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshBuiltinStatsReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshBuiltinStatsReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Fallback is fallback service
// @MPI("${mesh.name}.builtin.fallback")
func (that *meshBuiltinMPI) Fallback(ctx context.Context) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Fallback"])
	return err
}

type MeshBuiltinDocParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Name        string            `index:"0" json:"name" xml:"name" yaml:"name"`
	Formatter   string            `index:"1" json:"formatter" xml:"formatter" yaml:"formatter"`
}

func (that *MeshBuiltinDocParameters) GetKind() interface{} {
	return new(MeshBuiltinDocParameters)
}

func (that *MeshBuiltinDocParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Name)
	arguments = append(arguments, that.Formatter)
	return arguments
}

func (that *MeshBuiltinDocParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Name = arguments[0].(string)
		}
		if len(arguments) > 1 && nil != arguments[1] {
			that.Formatter = arguments[1].(string)
		}
	}
}

func (that *MeshBuiltinDocParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshBuiltinDocParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshBuiltinDocReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content string       `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshBuiltinDocReturns) GetCode() string {
	return that.Code
}

func (that *MeshBuiltinDocReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshBuiltinDocReturns) GetMessage() string {
	return that.Message
}

func (that *MeshBuiltinDocReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshBuiltinDocReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshBuiltinDocReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshBuiltinDocReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshBuiltinDocReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(string)
		}
	}
}

type MeshBuiltinVersionParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshBuiltinVersionParameters) GetKind() interface{} {
	return new(MeshBuiltinVersionParameters)
}

func (that *MeshBuiltinVersionParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshBuiltinVersionParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshBuiltinVersionParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshBuiltinVersionParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshBuiltinVersionReturns struct {
	Code    string          `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string          `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause    `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Versions `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshBuiltinVersionReturns) GetCode() string {
	return that.Code
}

func (that *MeshBuiltinVersionReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshBuiltinVersionReturns) GetMessage() string {
	return that.Message
}

func (that *MeshBuiltinVersionReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshBuiltinVersionReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshBuiltinVersionReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshBuiltinVersionReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshBuiltinVersionReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Versions)
		}
	}
}

type MeshBuiltinDebugParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Features    map[string]string `index:"0" json:"features" xml:"features" yaml:"features"`
}

func (that *MeshBuiltinDebugParameters) GetKind() interface{} {
	return new(MeshBuiltinDebugParameters)
}

func (that *MeshBuiltinDebugParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Features)
	return arguments
}

func (that *MeshBuiltinDebugParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Features = arguments[0].(map[string]string)
		}
	}
}

func (that *MeshBuiltinDebugParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshBuiltinDebugParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshBuiltinDebugReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshBuiltinDebugReturns) GetCode() string {
	return that.Code
}

func (that *MeshBuiltinDebugReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshBuiltinDebugReturns) GetMessage() string {
	return that.Message
}

func (that *MeshBuiltinDebugReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshBuiltinDebugReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshBuiltinDebugReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshBuiltinDebugReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshBuiltinDebugReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshBuiltinStatsParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Features    []string          `index:"0" json:"features" xml:"features" yaml:"features"`
}

func (that *MeshBuiltinStatsParameters) GetKind() interface{} {
	return new(MeshBuiltinStatsParameters)
}

func (that *MeshBuiltinStatsParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Features)
	return arguments
}

func (that *MeshBuiltinStatsParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Features = arguments[0].([]string)
		}
	}
}

func (that *MeshBuiltinStatsParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshBuiltinStatsParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshBuiltinStatsReturns struct {
	Code    string            `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string            `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause      `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content map[string]string `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshBuiltinStatsReturns) GetCode() string {
	return that.Code
}

func (that *MeshBuiltinStatsReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshBuiltinStatsReturns) GetMessage() string {
	return that.Message
}

func (that *MeshBuiltinStatsReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshBuiltinStatsReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshBuiltinStatsReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshBuiltinStatsReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshBuiltinStatsReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(map[string]string)
		}
	}
}

type MeshBuiltinFallbackParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshBuiltinFallbackParameters) GetKind() interface{} {
	return new(MeshBuiltinFallbackParameters)
}

func (that *MeshBuiltinFallbackParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshBuiltinFallbackParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshBuiltinFallbackParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshBuiltinFallbackParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshBuiltinFallbackReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshBuiltinFallbackReturns) GetCode() string {
	return that.Code
}

func (that *MeshBuiltinFallbackReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshBuiltinFallbackReturns) GetMessage() string {
	return that.Message
}

func (that *MeshBuiltinFallbackReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshBuiltinFallbackReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshBuiltinFallbackReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshBuiltinFallbackReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshBuiltinFallbackReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}
