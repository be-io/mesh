/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/be-io/mesh/client/golang/cause"
	"github.com/be-io/mesh/client/golang/macro"
	"github.com/be-io/mesh/client/golang/mpc"
	"github.com/be-io/mesh/client/golang/prsim"
	"github.com/be-io/mesh/client/golang/types"
)

func init() {
	var _ macro.Interface = new(meshNetworkProbeMPI)
	macro.Provide((*prsim.NetworkProbe)(nil), &meshNetworkProbeMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Ping": {
				DeclaredKind: (*prsim.NetworkProbe)(nil),
				TName:        "prsim.NetworkProbe",
				Name:         "Ping",
				Intype:       func() macro.Parameters { var parameters MeshNetworkProbePingParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshNetworkProbePingReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshNetworkProbePingParameters) },
				Outbound:     func() macro.Returns { return new(MeshNetworkProbePingReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.probe.v1.ping"},
				},
			},
			"HealthCheck": {
				DeclaredKind: (*prsim.NetworkProbe)(nil),
				TName:        "prsim.NetworkProbe",
				Name:         "HealthCheck",
				Intype:       func() macro.Parameters { var parameters MeshNetworkProbeHealthCheckParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshNetworkProbeHealthCheckReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshNetworkProbeHealthCheckParameters) },
				Outbound:     func() macro.Returns { return new(MeshNetworkProbeHealthCheckReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.probe.v1.healthcheck"},
				},
			},
		},
	})
}

// meshNetworkProbeMPI is an implementation of NetworkProbe
type meshNetworkProbeMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshNetworkProbeMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshNetworkProbeMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshNetworkProbeMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Ping
// @MPI("mesh.probe.v1.ping")
func (that *meshNetworkProbeMPI) Ping(ctx context.Context) (string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Ping"])
	if nil != err {
		x := new(MeshNetworkProbePingReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshNetworkProbePingReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshNetworkProbePingReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// HealthCheck
// @MPI("mesh.probe.v1.healthcheck")
func (that *meshNetworkProbeMPI) HealthCheck(ctx context.Context) (*types.ProbeResponse, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["HealthCheck"])
	if nil != err {
		x := new(MeshNetworkProbeHealthCheckReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshNetworkProbeHealthCheckReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshNetworkProbeHealthCheckReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshNetworkProbePingParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshNetworkProbePingParameters) GetKind() interface{} {
	return new(MeshNetworkProbePingParameters)
}

func (that *MeshNetworkProbePingParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshNetworkProbePingParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshNetworkProbePingParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshNetworkProbePingParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshNetworkProbePingReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content string       `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshNetworkProbePingReturns) GetCode() string {
	return that.Code
}

func (that *MeshNetworkProbePingReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshNetworkProbePingReturns) GetMessage() string {
	return that.Message
}

func (that *MeshNetworkProbePingReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshNetworkProbePingReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshNetworkProbePingReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshNetworkProbePingReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshNetworkProbePingReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(string)
		}
	}
}

type MeshNetworkProbeHealthCheckParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshNetworkProbeHealthCheckParameters) GetKind() interface{} {
	return new(MeshNetworkProbeHealthCheckParameters)
}

func (that *MeshNetworkProbeHealthCheckParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshNetworkProbeHealthCheckParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshNetworkProbeHealthCheckParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshNetworkProbeHealthCheckParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshNetworkProbeHealthCheckReturns struct {
	Code    string               `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string               `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause         `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.ProbeResponse `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshNetworkProbeHealthCheckReturns) GetCode() string {
	return that.Code
}

func (that *MeshNetworkProbeHealthCheckReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshNetworkProbeHealthCheckReturns) GetMessage() string {
	return that.Message
}

func (that *MeshNetworkProbeHealthCheckReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshNetworkProbeHealthCheckReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshNetworkProbeHealthCheckReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshNetworkProbeHealthCheckReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshNetworkProbeHealthCheckReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.ProbeResponse)
		}
	}
}
