/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/be-io/mesh/client/golang/cause"
	"github.com/be-io/mesh/client/golang/macro"
	"github.com/be-io/mesh/client/golang/mpc"
	"github.com/be-io/mesh/client/golang/prsim"
	"github.com/be-io/mesh/client/golang/types"
)

func init() {
	var _ macro.Interface = new(meshGraphMPI)
	macro.Provide((*prsim.Graph)(nil), &meshGraphMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"GraphQL": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "GraphQL",
				Intype:       func() macro.Parameters { var parameters MeshGraphGraphQLParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphGraphQLReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphGraphQLParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphGraphQLReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.graphql"},
				},
			},
			"Vertex": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Vertex",
				Intype:       func() macro.Parameters { var parameters MeshGraphVertexParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphVertexReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphVertexParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphVertexReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.vertex"},
				},
			},
			"Vertices": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Vertices",
				Intype:       func() macro.Parameters { var parameters MeshGraphVerticesParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphVerticesReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphVerticesParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphVerticesReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.vertices"},
				},
			},
			"Vertexes": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Vertexes",
				Intype:       func() macro.Parameters { var parameters MeshGraphVertexesParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphVertexesReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphVertexesParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphVertexesReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.vertexes"},
				},
			},
			"Side": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Side",
				Intype:       func() macro.Parameters { var parameters MeshGraphSideParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphSideReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphSideParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphSideReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.side"},
				},
			},
			"Sides": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Sides",
				Intype:       func() macro.Parameters { var parameters MeshGraphSidesParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphSidesReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphSidesParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphSidesReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.sides"},
				},
			},
			"Link": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Link",
				Intype:       func() macro.Parameters { var parameters MeshGraphLinkParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphLinkReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphLinkParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphLinkReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.link"},
				},
			},
			"Unlink": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Unlink",
				Intype:       func() macro.Parameters { var parameters MeshGraphUnlinkParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphUnlinkReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphUnlinkParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphUnlinkReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.unlink"},
				},
			},
			"Paths": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Paths",
				Intype:       func() macro.Parameters { var parameters MeshGraphPathsParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphPathsReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphPathsParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphPathsReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.paths"},
				},
			},
			"Dijkstra": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Dijkstra",
				Intype:       func() macro.Parameters { var parameters MeshGraphDijkstraParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphDijkstraReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphDijkstraParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphDijkstraReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.dijkstra"},
				},
			},
			"Drop": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Drop",
				Intype:       func() macro.Parameters { var parameters MeshGraphDropParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphDropReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphDropParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphDropReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.drop"},
				},
			},
			"Dump": {
				DeclaredKind: (*prsim.Graph)(nil),
				TName:        "prsim.Graph",
				Name:         "Dump",
				Intype:       func() macro.Parameters { var parameters MeshGraphDumpParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshGraphDumpReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshGraphDumpParameters) },
				Outbound:     func() macro.Returns { return new(MeshGraphDumpReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.graph.dump"},
				},
			},
		},
	})
}

// meshGraphMPI is an implementation of Graph
type meshGraphMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshGraphMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshGraphMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshGraphMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// GraphQL apply graph query language.
// @MPI("mesh.graph.graphql")
func (that *meshGraphMPI) GraphQL(ctx context.Context, mql string, args map[string]any) ([]map[string]any, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["GraphQL"], mql, args)
	if nil != err {
		x := new(MeshGraphGraphQLReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphGraphQLReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphGraphQLReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Vertex
// @MPI("mesh.graph.vertex")
func (that *meshGraphMPI) Vertex(ctx context.Context, id string) (*types.Vertex, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Vertex"], id)
	if nil != err {
		x := new(MeshGraphVertexReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphVertexReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphVertexReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Vertices
// @MPI("mesh.graph.vertices")
func (that *meshGraphMPI) Vertices(ctx context.Context, pattern string) ([]string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Vertices"], pattern)
	if nil != err {
		x := new(MeshGraphVerticesReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphVerticesReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphVerticesReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Vertexes points.
// @MPI("mesh.graph.vertexes")
func (that *meshGraphMPI) Vertexes(ctx context.Context, index *types.Paging) (*types.Page[*types.Vertex], error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Vertexes"], index)
	if nil != err {
		x := new(MeshGraphVertexesReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphVertexesReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphVertexesReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Side
// @MPI("mesh.graph.side")
func (that *meshGraphMPI) Side(ctx context.Context, triple *types.Triple) (*types.Side, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Side"], triple)
	if nil != err {
		x := new(MeshGraphSideReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphSideReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphSideReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Sides
// @MPI("mesh.graph.sides")
func (that *meshGraphMPI) Sides(ctx context.Context, index *types.Paging) (*types.Page[*types.Side], error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Sides"], index)
	if nil != err {
		x := new(MeshGraphSidesReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphSidesReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphSidesReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Link vertex with side.
// @MPI("mesh.graph.link")
func (that *meshGraphMPI) Link(ctx context.Context, quads []*types.Quad) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Link"], quads)
	return err
}

// Unlink vertex with side.
// @MPI("mesh.graph.unlink")
func (that *meshGraphMPI) Unlink(ctx context.Context, triples []*types.Triple) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Unlink"], triples)
	return err
}

// Paths paths.
// @MPI("mesh.graph.paths")
func (that *meshGraphMPI) Paths(ctx context.Context, tuple *types.Tuple) ([][]*types.Quad, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Paths"], tuple)
	if nil != err {
		x := new(MeshGraphPathsReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphPathsReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphPathsReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Dijkstra
// @MPI("mesh.graph.dijkstra")
func (that *meshGraphMPI) Dijkstra(ctx context.Context, triple *types.Triple) ([][]*types.Quad, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Dijkstra"], triple)
	if nil != err {
		x := new(MeshGraphDijkstraReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphDijkstraReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphDijkstraReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Drop point.
// @MPI("mesh.graph.drop")
func (that *meshGraphMPI) Drop(ctx context.Context, triples []*types.Triple) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Drop"], triples)
	return err
}

// Dump
// @MPI("mesh.graph.dump")
func (that *meshGraphMPI) Dump(ctx context.Context) ([]*types.Quad, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Dump"])
	if nil != err {
		x := new(MeshGraphDumpReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshGraphDumpReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshGraphDumpReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshGraphGraphQLParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Mql         string            `index:"0" json:"mql" xml:"mql" yaml:"mql"`
	Args        map[string]any    `index:"1" json:"args" xml:"args" yaml:"args"`
}

func (that *MeshGraphGraphQLParameters) GetKind() interface{} {
	return new(MeshGraphGraphQLParameters)
}

func (that *MeshGraphGraphQLParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Mql)
	arguments = append(arguments, that.Args)
	return arguments
}

func (that *MeshGraphGraphQLParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Mql = arguments[0].(string)
		}
		if len(arguments) > 1 && nil != arguments[1] {
			that.Args = arguments[1].(map[string]any)
		}
	}
}

func (that *MeshGraphGraphQLParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphGraphQLParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphGraphQLReturns struct {
	Code    string           `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string           `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause     `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []map[string]any `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphGraphQLReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphGraphQLReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphGraphQLReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphGraphQLReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphGraphQLReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphGraphQLReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphGraphQLReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphGraphQLReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]map[string]any)
		}
	}
}

type MeshGraphVertexParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Id          string            `index:"0" json:"id" xml:"id" yaml:"id"`
}

func (that *MeshGraphVertexParameters) GetKind() interface{} {
	return new(MeshGraphVertexParameters)
}

func (that *MeshGraphVertexParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Id)
	return arguments
}

func (that *MeshGraphVertexParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Id = arguments[0].(string)
		}
	}
}

func (that *MeshGraphVertexParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphVertexParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphVertexReturns struct {
	Code    string        `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string        `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause  `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Vertex `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphVertexReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphVertexReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphVertexReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphVertexReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphVertexReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphVertexReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphVertexReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphVertexReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Vertex)
		}
	}
}

type MeshGraphVerticesParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Pattern     string            `index:"0" json:"pattern" xml:"pattern" yaml:"pattern"`
}

func (that *MeshGraphVerticesParameters) GetKind() interface{} {
	return new(MeshGraphVerticesParameters)
}

func (that *MeshGraphVerticesParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Pattern)
	return arguments
}

func (that *MeshGraphVerticesParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Pattern = arguments[0].(string)
		}
	}
}

func (that *MeshGraphVerticesParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphVerticesParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphVerticesReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []string     `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphVerticesReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphVerticesReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphVerticesReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphVerticesReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphVerticesReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphVerticesReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphVerticesReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphVerticesReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]string)
		}
	}
}

type MeshGraphVertexesParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Index       *types.Paging     `index:"0" json:"index" xml:"index" yaml:"index"`
}

func (that *MeshGraphVertexesParameters) GetKind() interface{} {
	return new(MeshGraphVertexesParameters)
}

func (that *MeshGraphVertexesParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Index)
	return arguments
}

func (that *MeshGraphVertexesParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Index = arguments[0].(*types.Paging)
		}
	}
}

func (that *MeshGraphVertexesParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphVertexesParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphVertexesReturns struct {
	Code    string                     `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string                     `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause               `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Page[*types.Vertex] `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphVertexesReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphVertexesReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphVertexesReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphVertexesReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphVertexesReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphVertexesReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphVertexesReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphVertexesReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Page[*types.Vertex])
		}
	}
}

type MeshGraphSideParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Triple      *types.Triple     `index:"0" json:"triple" xml:"triple" yaml:"triple"`
}

func (that *MeshGraphSideParameters) GetKind() interface{} {
	return new(MeshGraphSideParameters)
}

func (that *MeshGraphSideParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Triple)
	return arguments
}

func (that *MeshGraphSideParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Triple = arguments[0].(*types.Triple)
		}
	}
}

func (that *MeshGraphSideParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphSideParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphSideReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Side  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphSideReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphSideReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphSideReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphSideReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphSideReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphSideReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphSideReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphSideReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Side)
		}
	}
}

type MeshGraphSidesParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Index       *types.Paging     `index:"0" json:"index" xml:"index" yaml:"index"`
}

func (that *MeshGraphSidesParameters) GetKind() interface{} {
	return new(MeshGraphSidesParameters)
}

func (that *MeshGraphSidesParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Index)
	return arguments
}

func (that *MeshGraphSidesParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Index = arguments[0].(*types.Paging)
		}
	}
}

func (that *MeshGraphSidesParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphSidesParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphSidesReturns struct {
	Code    string                   `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string                   `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause             `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Page[*types.Side] `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphSidesReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphSidesReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphSidesReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphSidesReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphSidesReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphSidesReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphSidesReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphSidesReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Page[*types.Side])
		}
	}
}

type MeshGraphLinkParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Quads       []*types.Quad     `index:"0" json:"quads" xml:"quads" yaml:"quads"`
}

func (that *MeshGraphLinkParameters) GetKind() interface{} {
	return new(MeshGraphLinkParameters)
}

func (that *MeshGraphLinkParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Quads)
	return arguments
}

func (that *MeshGraphLinkParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Quads = arguments[0].([]*types.Quad)
		}
	}
}

func (that *MeshGraphLinkParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphLinkParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphLinkReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshGraphLinkReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphLinkReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphLinkReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphLinkReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphLinkReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphLinkReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphLinkReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshGraphLinkReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshGraphUnlinkParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Triples     []*types.Triple   `index:"0" json:"triples" xml:"triples" yaml:"triples"`
}

func (that *MeshGraphUnlinkParameters) GetKind() interface{} {
	return new(MeshGraphUnlinkParameters)
}

func (that *MeshGraphUnlinkParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Triples)
	return arguments
}

func (that *MeshGraphUnlinkParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Triples = arguments[0].([]*types.Triple)
		}
	}
}

func (that *MeshGraphUnlinkParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphUnlinkParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphUnlinkReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshGraphUnlinkReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphUnlinkReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphUnlinkReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphUnlinkReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphUnlinkReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphUnlinkReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphUnlinkReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshGraphUnlinkReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshGraphPathsParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Tuple       *types.Tuple      `index:"0" json:"tuple" xml:"tuple" yaml:"tuple"`
}

func (that *MeshGraphPathsParameters) GetKind() interface{} {
	return new(MeshGraphPathsParameters)
}

func (that *MeshGraphPathsParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Tuple)
	return arguments
}

func (that *MeshGraphPathsParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Tuple = arguments[0].(*types.Tuple)
		}
	}
}

func (that *MeshGraphPathsParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphPathsParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphPathsReturns struct {
	Code    string          `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string          `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause    `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content [][]*types.Quad `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphPathsReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphPathsReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphPathsReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphPathsReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphPathsReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphPathsReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphPathsReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphPathsReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([][]*types.Quad)
		}
	}
}

type MeshGraphDijkstraParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Triple      *types.Triple     `index:"0" json:"triple" xml:"triple" yaml:"triple"`
}

func (that *MeshGraphDijkstraParameters) GetKind() interface{} {
	return new(MeshGraphDijkstraParameters)
}

func (that *MeshGraphDijkstraParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Triple)
	return arguments
}

func (that *MeshGraphDijkstraParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Triple = arguments[0].(*types.Triple)
		}
	}
}

func (that *MeshGraphDijkstraParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphDijkstraParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphDijkstraReturns struct {
	Code    string          `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string          `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause    `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content [][]*types.Quad `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphDijkstraReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphDijkstraReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphDijkstraReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphDijkstraReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphDijkstraReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphDijkstraReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphDijkstraReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphDijkstraReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([][]*types.Quad)
		}
	}
}

type MeshGraphDropParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Triples     []*types.Triple   `index:"0" json:"triples" xml:"triples" yaml:"triples"`
}

func (that *MeshGraphDropParameters) GetKind() interface{} {
	return new(MeshGraphDropParameters)
}

func (that *MeshGraphDropParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Triples)
	return arguments
}

func (that *MeshGraphDropParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Triples = arguments[0].([]*types.Triple)
		}
	}
}

func (that *MeshGraphDropParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphDropParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphDropReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshGraphDropReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphDropReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphDropReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphDropReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphDropReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphDropReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphDropReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshGraphDropReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshGraphDumpParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshGraphDumpParameters) GetKind() interface{} {
	return new(MeshGraphDumpParameters)
}

func (that *MeshGraphDumpParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshGraphDumpParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshGraphDumpParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshGraphDumpParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshGraphDumpReturns struct {
	Code    string        `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string        `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause  `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []*types.Quad `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshGraphDumpReturns) GetCode() string {
	return that.Code
}

func (that *MeshGraphDumpReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshGraphDumpReturns) GetMessage() string {
	return that.Message
}

func (that *MeshGraphDumpReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshGraphDumpReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshGraphDumpReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshGraphDumpReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshGraphDumpReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]*types.Quad)
		}
	}
}
