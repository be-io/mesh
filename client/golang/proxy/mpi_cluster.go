/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/be-io/mesh/client/golang/cause"
	"github.com/be-io/mesh/client/golang/macro"
	"github.com/be-io/mesh/client/golang/mpc"
	"github.com/be-io/mesh/client/golang/prsim"
)

func init() {
	var _ macro.Interface = new(meshClusterMPI)
	macro.Provide((*prsim.Cluster)(nil), &meshClusterMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Election": {
				DeclaredKind: (*prsim.Cluster)(nil),
				TName:        "prsim.Cluster",
				Name:         "Election",
				Intype:       func() macro.Parameters { var parameters MeshClusterElectionParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshClusterElectionReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshClusterElectionParameters) },
				Outbound:     func() macro.Returns { return new(MeshClusterElectionReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.cluster.election"},
				},
			},
			"IsLeader": {
				DeclaredKind: (*prsim.Cluster)(nil),
				TName:        "prsim.Cluster",
				Name:         "IsLeader",
				Intype:       func() macro.Parameters { var parameters MeshClusterIsLeaderParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshClusterIsLeaderReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshClusterIsLeaderParameters) },
				Outbound:     func() macro.Returns { return new(MeshClusterIsLeaderReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.cluster.leader"},
				},
			},
		},
	})
}

// meshClusterMPI is an implementation of Cluster
type meshClusterMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshClusterMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshClusterMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshClusterMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Election will election leader of instances.
// @MPI("mesh.cluster.election")
func (that *meshClusterMPI) Election(ctx context.Context, buff []byte) ([]byte, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Election"], buff)
	if nil != err {
		x := new(MeshClusterElectionReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshClusterElectionReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshClusterElectionReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// IsLeader if same level.
// @MPI("mesh.cluster.leader")
func (that *meshClusterMPI) IsLeader(ctx context.Context) (bool, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["IsLeader"])
	if nil != err {
		x := new(MeshClusterIsLeaderReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshClusterIsLeaderReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshClusterIsLeaderReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshClusterElectionParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Buff        []byte            `index:"0" json:"buff" xml:"buff" yaml:"buff"`
}

func (that *MeshClusterElectionParameters) GetKind() interface{} {
	return new(MeshClusterElectionParameters)
}

func (that *MeshClusterElectionParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Buff)
	return arguments
}

func (that *MeshClusterElectionParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Buff = arguments[0].([]byte)
		}
	}
}

func (that *MeshClusterElectionParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshClusterElectionParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshClusterElectionReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []byte       `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshClusterElectionReturns) GetCode() string {
	return that.Code
}

func (that *MeshClusterElectionReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshClusterElectionReturns) GetMessage() string {
	return that.Message
}

func (that *MeshClusterElectionReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshClusterElectionReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshClusterElectionReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshClusterElectionReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshClusterElectionReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]byte)
		}
	}
}

type MeshClusterIsLeaderParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshClusterIsLeaderParameters) GetKind() interface{} {
	return new(MeshClusterIsLeaderParameters)
}

func (that *MeshClusterIsLeaderParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshClusterIsLeaderParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshClusterIsLeaderParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshClusterIsLeaderParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshClusterIsLeaderReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content bool         `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshClusterIsLeaderReturns) GetCode() string {
	return that.Code
}

func (that *MeshClusterIsLeaderReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshClusterIsLeaderReturns) GetMessage() string {
	return that.Message
}

func (that *MeshClusterIsLeaderReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshClusterIsLeaderReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshClusterIsLeaderReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshClusterIsLeaderReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshClusterIsLeaderReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(bool)
		}
	}
}
