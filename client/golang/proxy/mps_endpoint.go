/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"
	"strings"

	"github.com/be-io/mesh/client/golang/cause"
	"github.com/be-io/mesh/client/golang/macro"
	"github.com/be-io/mesh/client/golang/mpc"
	"github.com/be-io/mesh/client/golang/prsim"
	"github.com/be-io/mesh/client/golang/system"
	"github.com/be-io/mesh/client/golang/tool"
)

func init() {
	var service = &meshMeshEndpointMPS{mps: new(system.MeshEndpoint)}
	var _ prsim.Endpoint = service
	macro.Provide((*prsim.Endpoint)(nil), service)

	var serviceFuzzy = &meshMeshEndpointFuzzyMPS{service: service}
	var _ mpc.Invoker = serviceFuzzy
	var _ macro.Caller = serviceFuzzy
	macro.Provide(mpc.IInvoker, serviceFuzzy)
	macro.Provide(macro.ICaller, serviceFuzzy)

}

// meshMeshEndpointMPS is an implementation of system.MeshEndpoint
type meshMeshEndpointMPS struct {
	mps *system.MeshEndpoint
}

func (that *meshMeshEndpointMPS) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshSPI}
}

func (that *meshMeshEndpointMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: macro.MeshMPS}
}

func (that *meshMeshEndpointMPS) Inspect() []macro.MPI {
	return that.mps.Inspect()
}

// Fuzzy call with generic param
// In multi returns, it's an array.
// @MPI("${mesh.uname}")
func (that *meshMeshEndpointMPS) Fuzzy(ctx context.Context, buff []byte) ([]byte, error) {
	return that.mps.Fuzzy(ctx, buff)
}

type meshMeshEndpointFuzzyMPS struct {
	service prsim.Endpoint
}

func (that *meshMeshEndpointFuzzyMPS) Att() *macro.Att {
	return &macro.Att{Name: strings.ReplaceAll("${mesh.uname}", "${mesh.name}", tool.Name.Get())}
}
func (that *meshMeshEndpointFuzzyMPS) Stt() *macro.Stt {
	return &macro.Stt{Name: strings.ReplaceAll("${mesh.uname}", "${mesh.name}", tool.Name.Get())}
}

func (that *meshMeshEndpointFuzzyMPS) Call(ctx context.Context, proxy interface{}, method macro.Inspector, args ...interface{}) (interface{}, error) {
	parameters := new(MeshEndpointFuzzyParameters)
	parameters.SetArguments(ctx, args...)
	return that.service.Fuzzy(ctx, parameters.Buff)
}

func (that *meshMeshEndpointFuzzyMPS) Invoke(ctx context.Context, invocation mpc.Invocation) (interface{}, error) {
	parameters, ok := invocation.GetParameters().(*MeshEndpointFuzzyParameters)
	if !ok {
		return nil, cause.CompatibleError("Service %s parameters can't compatible. ", mpc.ContextWith(ctx).GetUrn())
	}
	return that.service.Fuzzy(ctx, parameters.Buff)
}
