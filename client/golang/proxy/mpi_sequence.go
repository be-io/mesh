/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	"github.com/opendatav/mesh/client/golang/prsim"
)

func init() {
	var _ macro.Interface = new(meshSequenceMPI)
	macro.Provide((*prsim.Sequence)(nil), &meshSequenceMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Next": {
				DeclaredKind: (*prsim.Sequence)(nil),
				TName:        "prsim.Sequence",
				Name:         "Next",
				Intype:       func() macro.Parameters { var parameters MeshSequenceNextParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshSequenceNextReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshSequenceNextParameters) },
				Outbound:     func() macro.Returns { return new(MeshSequenceNextReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.sequence.next"},
				},
			},
			"Section": {
				DeclaredKind: (*prsim.Sequence)(nil),
				TName:        "prsim.Sequence",
				Name:         "Section",
				Intype:       func() macro.Parameters { var parameters MeshSequenceSectionParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshSequenceSectionReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshSequenceSectionParameters) },
				Outbound:     func() macro.Returns { return new(MeshSequenceSectionReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.sequence.section"},
				},
			},
		},
	})
}

// meshSequenceMPI is an implementation of Sequence
type meshSequenceMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshSequenceMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshSequenceMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshSequenceMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Next
// @MPI("mesh.sequence.next")
func (that *meshSequenceMPI) Next(ctx context.Context, kind string, length int) (string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Next"], kind, length)
	if nil != err {
		x := new(MeshSequenceNextReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshSequenceNextReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshSequenceNextReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Section
// @MPI("mesh.sequence.section")
func (that *meshSequenceMPI) Section(ctx context.Context, kind string, size int, length int) ([]string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Section"], kind, size, length)
	if nil != err {
		x := new(MeshSequenceSectionReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshSequenceSectionReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshSequenceSectionReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshSequenceNextParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Kind        string            `index:"0" json:"kind" xml:"kind" yaml:"kind"`
	Length      int               `index:"1" json:"length" xml:"length" yaml:"length"`
}

func (that *MeshSequenceNextParameters) GetKind() interface{} {
	return new(MeshSequenceNextParameters)
}

func (that *MeshSequenceNextParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Kind)
	arguments = append(arguments, that.Length)
	return arguments
}

func (that *MeshSequenceNextParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Kind = arguments[0].(string)
		}
		if len(arguments) > 1 && nil != arguments[1] {
			that.Length = arguments[1].(int)
		}
	}
}

func (that *MeshSequenceNextParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshSequenceNextParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshSequenceNextReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content string       `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshSequenceNextReturns) GetCode() string {
	return that.Code
}

func (that *MeshSequenceNextReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshSequenceNextReturns) GetMessage() string {
	return that.Message
}

func (that *MeshSequenceNextReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshSequenceNextReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshSequenceNextReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshSequenceNextReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshSequenceNextReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(string)
		}
	}
}

type MeshSequenceSectionParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Kind        string            `index:"0" json:"kind" xml:"kind" yaml:"kind"`
	Size        int               `index:"1" json:"size" xml:"size" yaml:"size"`
	Length      int               `index:"2" json:"length" xml:"length" yaml:"length"`
}

func (that *MeshSequenceSectionParameters) GetKind() interface{} {
	return new(MeshSequenceSectionParameters)
}

func (that *MeshSequenceSectionParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Kind)
	arguments = append(arguments, that.Size)
	arguments = append(arguments, that.Length)
	return arguments
}

func (that *MeshSequenceSectionParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Kind = arguments[0].(string)
		}
		if len(arguments) > 1 && nil != arguments[1] {
			that.Size = arguments[1].(int)
		}
		if len(arguments) > 2 && nil != arguments[2] {
			that.Length = arguments[2].(int)
		}
	}
}

func (that *MeshSequenceSectionParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshSequenceSectionParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshSequenceSectionReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []string     `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshSequenceSectionReturns) GetCode() string {
	return that.Code
}

func (that *MeshSequenceSectionReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshSequenceSectionReturns) GetMessage() string {
	return that.Message
}

func (that *MeshSequenceSectionReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshSequenceSectionReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshSequenceSectionReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshSequenceSectionReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshSequenceSectionReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]string)
		}
	}
}
