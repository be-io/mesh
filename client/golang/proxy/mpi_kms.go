/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/be-io/mesh/client/golang/cause"
	"github.com/be-io/mesh/client/golang/macro"
	"github.com/be-io/mesh/client/golang/mpc"
	"github.com/be-io/mesh/client/golang/prsim"
	"github.com/be-io/mesh/client/golang/types"
)

func init() {
	var _ macro.Interface = new(meshKMSMPI)
	macro.Provide((*prsim.KMS)(nil), &meshKMSMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Reset": {
				DeclaredKind: (*prsim.KMS)(nil),
				TName:        "prsim.KMS",
				Name:         "Reset",
				Intype:       func() macro.Parameters { var parameters MeshKMSResetParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKMSResetReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKMSResetParameters) },
				Outbound:     func() macro.Returns { return new(MeshKMSResetReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "kms.store.reset"},
				},
			},
			"Environ": {
				DeclaredKind: (*prsim.KMS)(nil),
				TName:        "prsim.KMS",
				Name:         "Environ",
				Intype:       func() macro.Parameters { var parameters MeshKMSEnvironParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKMSEnvironReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKMSEnvironParameters) },
				Outbound:     func() macro.Returns { return new(MeshKMSEnvironReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "kms.store.environ"},
				},
			},
			"List": {
				DeclaredKind: (*prsim.KMS)(nil),
				TName:        "prsim.KMS",
				Name:         "List",
				Intype:       func() macro.Parameters { var parameters MeshKMSListParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKMSListReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKMSListParameters) },
				Outbound:     func() macro.Returns { return new(MeshKMSListReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "kms.crt.store.list"},
				},
			},
			"ApplyRoot": {
				DeclaredKind: (*prsim.KMS)(nil),
				TName:        "prsim.KMS",
				Name:         "ApplyRoot",
				Intype:       func() macro.Parameters { var parameters MeshKMSApplyRootParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKMSApplyRootReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKMSApplyRootParameters) },
				Outbound:     func() macro.Returns { return new(MeshKMSApplyRootReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "kms.crt.apply.root"},
				},
			},
			"ApplyIssue": {
				DeclaredKind: (*prsim.KMS)(nil),
				TName:        "prsim.KMS",
				Name:         "ApplyIssue",
				Intype:       func() macro.Parameters { var parameters MeshKMSApplyIssueParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKMSApplyIssueReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKMSApplyIssueParameters) },
				Outbound:     func() macro.Returns { return new(MeshKMSApplyIssueReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "kms.crt.apply.issue"},
				},
			},
		},
	})
}

// meshKMSMPI is an implementation of KMS
type meshKMSMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshKMSMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshKMSMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshKMSMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Reset will override the keystore environ.
// @MPI("kms.store.reset")
func (that *meshKMSMPI) Reset(ctx context.Context, env *types.Environ) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Reset"], env)
	return err
}

// Environ will return the keystore environ.
// @MPI("kms.store.environ")
func (that *meshKMSMPI) Environ(ctx context.Context) (*types.Environ, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Environ"])
	if nil != err {
		x := new(MeshKMSEnvironReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshKMSEnvironReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshKMSEnvironReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// List will return the keystore environ.
// @MPI("kms.crt.store.list")
func (that *meshKMSMPI) List(ctx context.Context, cno string) ([]*types.Keys, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["List"], cno)
	if nil != err {
		x := new(MeshKMSListReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshKMSListReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshKMSListReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// ApplyRoot will apply the root certification.
// @MPI("kms.crt.apply.root")
func (that *meshKMSMPI) ApplyRoot(ctx context.Context, csr *types.KeyCsr) ([]*types.Keys, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["ApplyRoot"], csr)
	if nil != err {
		x := new(MeshKMSApplyRootReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshKMSApplyRootReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshKMSApplyRootReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// ApplyIssue will apply the common certification.
// @MPI("kms.crt.apply.issue")
func (that *meshKMSMPI) ApplyIssue(ctx context.Context, csr *types.KeyCsr) ([]*types.Keys, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["ApplyIssue"], csr)
	if nil != err {
		x := new(MeshKMSApplyIssueReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshKMSApplyIssueReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshKMSApplyIssueReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshKMSResetParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Env         *types.Environ    `index:"0" json:"env" xml:"env" yaml:"env"`
}

func (that *MeshKMSResetParameters) GetKind() interface{} {
	return new(MeshKMSResetParameters)
}

func (that *MeshKMSResetParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Env)
	return arguments
}

func (that *MeshKMSResetParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Env = arguments[0].(*types.Environ)
		}
	}
}

func (that *MeshKMSResetParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKMSResetParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKMSResetReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshKMSResetReturns) GetCode() string {
	return that.Code
}

func (that *MeshKMSResetReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKMSResetReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKMSResetReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKMSResetReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKMSResetReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKMSResetReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshKMSResetReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshKMSEnvironParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshKMSEnvironParameters) GetKind() interface{} {
	return new(MeshKMSEnvironParameters)
}

func (that *MeshKMSEnvironParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshKMSEnvironParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshKMSEnvironParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKMSEnvironParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKMSEnvironReturns struct {
	Code    string         `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string         `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause   `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Environ `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshKMSEnvironReturns) GetCode() string {
	return that.Code
}

func (that *MeshKMSEnvironReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKMSEnvironReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKMSEnvironReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKMSEnvironReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKMSEnvironReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKMSEnvironReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshKMSEnvironReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Environ)
		}
	}
}

type MeshKMSListParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Cno         string            `index:"0" json:"cno" xml:"cno" yaml:"cno"`
}

func (that *MeshKMSListParameters) GetKind() interface{} {
	return new(MeshKMSListParameters)
}

func (that *MeshKMSListParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Cno)
	return arguments
}

func (that *MeshKMSListParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Cno = arguments[0].(string)
		}
	}
}

func (that *MeshKMSListParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKMSListParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKMSListReturns struct {
	Code    string        `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string        `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause  `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []*types.Keys `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshKMSListReturns) GetCode() string {
	return that.Code
}

func (that *MeshKMSListReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKMSListReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKMSListReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKMSListReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKMSListReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKMSListReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshKMSListReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]*types.Keys)
		}
	}
}

type MeshKMSApplyRootParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Csr         *types.KeyCsr     `index:"0" json:"csr" xml:"csr" yaml:"csr"`
}

func (that *MeshKMSApplyRootParameters) GetKind() interface{} {
	return new(MeshKMSApplyRootParameters)
}

func (that *MeshKMSApplyRootParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Csr)
	return arguments
}

func (that *MeshKMSApplyRootParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Csr = arguments[0].(*types.KeyCsr)
		}
	}
}

func (that *MeshKMSApplyRootParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKMSApplyRootParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKMSApplyRootReturns struct {
	Code    string        `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string        `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause  `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []*types.Keys `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshKMSApplyRootReturns) GetCode() string {
	return that.Code
}

func (that *MeshKMSApplyRootReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKMSApplyRootReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKMSApplyRootReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKMSApplyRootReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKMSApplyRootReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKMSApplyRootReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshKMSApplyRootReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]*types.Keys)
		}
	}
}

type MeshKMSApplyIssueParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Csr         *types.KeyCsr     `index:"0" json:"csr" xml:"csr" yaml:"csr"`
}

func (that *MeshKMSApplyIssueParameters) GetKind() interface{} {
	return new(MeshKMSApplyIssueParameters)
}

func (that *MeshKMSApplyIssueParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Csr)
	return arguments
}

func (that *MeshKMSApplyIssueParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Csr = arguments[0].(*types.KeyCsr)
		}
	}
}

func (that *MeshKMSApplyIssueParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKMSApplyIssueParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKMSApplyIssueReturns struct {
	Code    string        `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string        `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause  `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []*types.Keys `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshKMSApplyIssueReturns) GetCode() string {
	return that.Code
}

func (that *MeshKMSApplyIssueReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKMSApplyIssueReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKMSApplyIssueReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKMSApplyIssueReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKMSApplyIssueReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKMSApplyIssueReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshKMSApplyIssueReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]*types.Keys)
		}
	}
}
