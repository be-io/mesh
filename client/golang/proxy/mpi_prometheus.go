/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/types"
)

func init() {
	var _ macro.Interface = new(meshPrometheusMPI)
	macro.Provide((*prsim.Prometheus)(nil), &meshPrometheusMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Range": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Range",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusRangeParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusRangeReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusRangeParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusRangeReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.monitor_query_range"},
				},
			},
			"Tasks": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Tasks",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusTasksParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusTasksReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusTasksParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusTasksReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.task_offline.query_list"},
				},
			},
			"Logs": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Logs",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusLogsParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusLogsReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusLogsParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusLogsReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.task_offline.query_log"},
				},
			},
			"Proxy": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Proxy",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusProxyParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusProxyReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusProxyParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusProxyReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.proxy_get"},
				},
			},
			"Query": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Query",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusQueryParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusQueryReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusQueryParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusQueryReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.query"},
				},
			},
			"Range0": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Range0",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusRange0Parameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusRange0Returns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusRange0Parameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusRange0Returns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.query_range"},
				},
			},
			"Series": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Series",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusSeriesParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusSeriesReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusSeriesParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusSeriesReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.series"},
				},
			},
			"Labels": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Labels",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusLabelsParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusLabelsReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusLabelsParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusLabelsReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.labels"},
				},
			},
			"LabelValues": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "LabelValues",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusLabelValuesParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusLabelValuesReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusLabelValuesParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusLabelValuesReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.label.values"},
				},
			},
			"Exemplars": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Exemplars",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusExemplarsParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusExemplarsReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusExemplarsParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusExemplarsReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.query_exemplars"},
				},
			},
			"Targets": {
				DeclaredKind: (*prsim.Prometheus)(nil),
				TName:        "prsim.Prometheus",
				Name:         "Targets",
				Intype:       func() macro.Parameters { var parameters MeshPrometheusTargetsParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshPrometheusTargetsReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshPrometheusTargetsParameters) },
				Outbound:     func() macro.Returns { return new(MeshPrometheusTargetsReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.prom.targets"},
				},
			},
		},
	})
}

// meshPrometheusMPI is an implementation of Prometheus
type meshPrometheusMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshPrometheusMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshPrometheusMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshPrometheusMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Range
// @MPI("mesh.prom.monitor_query_range")
func (that *meshPrometheusMPI) Range(ctx context.Context, param *types.PromRangeQuery) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Range"], param)
	if nil != err {
		x := new(MeshPrometheusRangeReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusRangeReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusRangeReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Tasks
// @MPI("mesh.prom.task_offline.query_list")
func (that *meshPrometheusMPI) Tasks(ctx context.Context, param *types.TasksIndex) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Tasks"], param)
	if nil != err {
		x := new(MeshPrometheusTasksReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusTasksReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusTasksReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Logs
// @MPI("mesh.prom.task_offline.query_log")
func (that *meshPrometheusMPI) Logs(ctx context.Context, param *types.LogsIndex) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Logs"], param)
	if nil != err {
		x := new(MeshPrometheusLogsReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusLogsReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusLogsReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Proxy
// @MPI("mesh.prom.proxy_get")
func (that *meshPrometheusMPI) Proxy(ctx context.Context, param *types.PromProxy) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Proxy"], param)
	if nil != err {
		x := new(MeshPrometheusProxyReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusProxyReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusProxyReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Query
// @MPI("mesh.prom.query")
func (that *meshPrometheusMPI) Query(ctx context.Context, param map[string]interface{}) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Query"], param)
	if nil != err {
		x := new(MeshPrometheusQueryReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusQueryReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusQueryReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Range0
// @MPI("mesh.prom.query_range")
func (that *meshPrometheusMPI) Range0(ctx context.Context, param map[string]interface{}) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Range0"], param)
	if nil != err {
		x := new(MeshPrometheusRange0Returns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusRange0Returns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusRange0Returns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Series
// @MPI("mesh.prom.series")
func (that *meshPrometheusMPI) Series(ctx context.Context, param map[string]interface{}) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Series"], param)
	if nil != err {
		x := new(MeshPrometheusSeriesReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusSeriesReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusSeriesReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Labels
// @MPI("mesh.prom.labels")
func (that *meshPrometheusMPI) Labels(ctx context.Context, param map[string]interface{}) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Labels"], param)
	if nil != err {
		x := new(MeshPrometheusLabelsReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusLabelsReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusLabelsReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// LabelValues
// @MPI("mesh.prom.label.values")
func (that *meshPrometheusMPI) LabelValues(ctx context.Context, param *types.PromLabelValue) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["LabelValues"], param)
	if nil != err {
		x := new(MeshPrometheusLabelValuesReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusLabelValuesReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusLabelValuesReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Exemplars
// @MPI("mesh.prom.query_exemplars")
func (that *meshPrometheusMPI) Exemplars(ctx context.Context, param map[string]interface{}) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Exemplars"], param)
	if nil != err {
		x := new(MeshPrometheusExemplarsReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusExemplarsReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusExemplarsReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Targets
// @MPI("mesh.prom.targets")
func (that *meshPrometheusMPI) Targets(ctx context.Context) (interface{}, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Targets"])
	if nil != err {
		x := new(MeshPrometheusTargetsReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshPrometheusTargetsReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshPrometheusTargetsReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshPrometheusRangeParameters struct {
	Attachments map[string]string     `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       *types.PromRangeQuery `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusRangeParameters) GetKind() interface{} {
	return new(MeshPrometheusRangeParameters)
}

func (that *MeshPrometheusRangeParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusRangeParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(*types.PromRangeQuery)
		}
	}
}

func (that *MeshPrometheusRangeParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusRangeParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusRangeReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusRangeReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusRangeReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusRangeReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusRangeReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusRangeReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusRangeReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusRangeReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusRangeReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusTasksParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       *types.TasksIndex `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusTasksParameters) GetKind() interface{} {
	return new(MeshPrometheusTasksParameters)
}

func (that *MeshPrometheusTasksParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusTasksParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(*types.TasksIndex)
		}
	}
}

func (that *MeshPrometheusTasksParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusTasksParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusTasksReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusTasksReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusTasksReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusTasksReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusTasksReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusTasksReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusTasksReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusTasksReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusTasksReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusLogsParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       *types.LogsIndex  `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusLogsParameters) GetKind() interface{} {
	return new(MeshPrometheusLogsParameters)
}

func (that *MeshPrometheusLogsParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusLogsParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(*types.LogsIndex)
		}
	}
}

func (that *MeshPrometheusLogsParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusLogsParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusLogsReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusLogsReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusLogsReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusLogsReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusLogsReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusLogsReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusLogsReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusLogsReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusLogsReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusProxyParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       *types.PromProxy  `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusProxyParameters) GetKind() interface{} {
	return new(MeshPrometheusProxyParameters)
}

func (that *MeshPrometheusProxyParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusProxyParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(*types.PromProxy)
		}
	}
}

func (that *MeshPrometheusProxyParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusProxyParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusProxyReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusProxyReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusProxyReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusProxyReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusProxyReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusProxyReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusProxyReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusProxyReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusProxyReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusQueryParameters struct {
	Attachments map[string]string      `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       map[string]interface{} `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusQueryParameters) GetKind() interface{} {
	return new(MeshPrometheusQueryParameters)
}

func (that *MeshPrometheusQueryParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusQueryParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(map[string]interface{})
		}
	}
}

func (that *MeshPrometheusQueryParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusQueryParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusQueryReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusQueryReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusQueryReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusQueryReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusQueryReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusQueryReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusQueryReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusQueryReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusQueryReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusRange0Parameters struct {
	Attachments map[string]string      `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       map[string]interface{} `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusRange0Parameters) GetKind() interface{} {
	return new(MeshPrometheusRange0Parameters)
}

func (that *MeshPrometheusRange0Parameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusRange0Parameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(map[string]interface{})
		}
	}
}

func (that *MeshPrometheusRange0Parameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusRange0Parameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusRange0Returns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusRange0Returns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusRange0Returns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusRange0Returns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusRange0Returns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusRange0Returns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusRange0Returns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusRange0Returns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusRange0Returns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusSeriesParameters struct {
	Attachments map[string]string      `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       map[string]interface{} `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusSeriesParameters) GetKind() interface{} {
	return new(MeshPrometheusSeriesParameters)
}

func (that *MeshPrometheusSeriesParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusSeriesParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(map[string]interface{})
		}
	}
}

func (that *MeshPrometheusSeriesParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusSeriesParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusSeriesReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusSeriesReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusSeriesReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusSeriesReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusSeriesReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusSeriesReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusSeriesReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusSeriesReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusSeriesReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusLabelsParameters struct {
	Attachments map[string]string      `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       map[string]interface{} `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusLabelsParameters) GetKind() interface{} {
	return new(MeshPrometheusLabelsParameters)
}

func (that *MeshPrometheusLabelsParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusLabelsParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(map[string]interface{})
		}
	}
}

func (that *MeshPrometheusLabelsParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusLabelsParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusLabelsReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusLabelsReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusLabelsReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusLabelsReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusLabelsReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusLabelsReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusLabelsReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusLabelsReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusLabelsReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusLabelValuesParameters struct {
	Attachments map[string]string     `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       *types.PromLabelValue `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusLabelValuesParameters) GetKind() interface{} {
	return new(MeshPrometheusLabelValuesParameters)
}

func (that *MeshPrometheusLabelValuesParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusLabelValuesParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(*types.PromLabelValue)
		}
	}
}

func (that *MeshPrometheusLabelValuesParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusLabelValuesParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusLabelValuesReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusLabelValuesReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusLabelValuesReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusLabelValuesReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusLabelValuesReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusLabelValuesReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusLabelValuesReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusLabelValuesReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusLabelValuesReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusExemplarsParameters struct {
	Attachments map[string]string      `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Param       map[string]interface{} `index:"0" json:"param" xml:"param" yaml:"param"`
}

func (that *MeshPrometheusExemplarsParameters) GetKind() interface{} {
	return new(MeshPrometheusExemplarsParameters)
}

func (that *MeshPrometheusExemplarsParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Param)
	return arguments
}

func (that *MeshPrometheusExemplarsParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Param = arguments[0].(map[string]interface{})
		}
	}
}

func (that *MeshPrometheusExemplarsParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusExemplarsParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusExemplarsReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusExemplarsReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusExemplarsReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusExemplarsReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusExemplarsReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusExemplarsReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusExemplarsReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusExemplarsReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusExemplarsReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}

type MeshPrometheusTargetsParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
}

func (that *MeshPrometheusTargetsParameters) GetKind() interface{} {
	return new(MeshPrometheusTargetsParameters)
}

func (that *MeshPrometheusTargetsParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshPrometheusTargetsParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

func (that *MeshPrometheusTargetsParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshPrometheusTargetsParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshPrometheusTargetsReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content interface{}  `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshPrometheusTargetsReturns) GetCode() string {
	return that.Code
}

func (that *MeshPrometheusTargetsReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshPrometheusTargetsReturns) GetMessage() string {
	return that.Message
}

func (that *MeshPrometheusTargetsReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshPrometheusTargetsReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshPrometheusTargetsReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshPrometheusTargetsReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshPrometheusTargetsReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(interface{})
		}
	}
}
