/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/types"
)

func init() {
	var _ macro.Interface = new(meshWorkflowMPI)
	macro.Provide((*prsim.Workflow)(nil), &meshWorkflowMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Mass": {
				DeclaredKind: (*prsim.Workflow)(nil),
				TName:        "prsim.Workflow",
				Name:         "Mass",
				Intype:       func() macro.Parameters { var parameters MeshWorkflowMassParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshWorkflowMassReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshWorkflowMassParameters) },
				Outbound:     func() macro.Returns { return new(MeshWorkflowMassReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.workflow.mass"},
				},
			},
			"Groups": {
				DeclaredKind: (*prsim.Workflow)(nil),
				TName:        "prsim.Workflow",
				Name:         "Groups",
				Intype:       func() macro.Parameters { var parameters MeshWorkflowGroupsParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshWorkflowGroupsReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshWorkflowGroupsParameters) },
				Outbound:     func() macro.Returns { return new(MeshWorkflowGroupsReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.workflow.groups"},
				},
			},
			"Compile": {
				DeclaredKind: (*prsim.Workflow)(nil),
				TName:        "prsim.Workflow",
				Name:         "Compile",
				Intype:       func() macro.Parameters { var parameters MeshWorkflowCompileParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshWorkflowCompileReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshWorkflowCompileParameters) },
				Outbound:     func() macro.Returns { return new(MeshWorkflowCompileReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.workflow.compile"},
				},
			},
			"Index": {
				DeclaredKind: (*prsim.Workflow)(nil),
				TName:        "prsim.Workflow",
				Name:         "Index",
				Intype:       func() macro.Parameters { var parameters MeshWorkflowIndexParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshWorkflowIndexReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshWorkflowIndexParameters) },
				Outbound:     func() macro.Returns { return new(MeshWorkflowIndexReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.workflow.index"},
				},
			},
			"Submit": {
				DeclaredKind: (*prsim.Workflow)(nil),
				TName:        "prsim.Workflow",
				Name:         "Submit",
				Intype:       func() macro.Parameters { var parameters MeshWorkflowSubmitParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshWorkflowSubmitReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshWorkflowSubmitParameters) },
				Outbound:     func() macro.Returns { return new(MeshWorkflowSubmitReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.workflow.submit"},
				},
			},
			"Take": {
				DeclaredKind: (*prsim.Workflow)(nil),
				TName:        "prsim.Workflow",
				Name:         "Take",
				Intype:       func() macro.Parameters { var parameters MeshWorkflowTakeParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshWorkflowTakeReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshWorkflowTakeParameters) },
				Outbound:     func() macro.Returns { return new(MeshWorkflowTakeReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.workflow.take"},
				},
			},
			"Routines": {
				DeclaredKind: (*prsim.Workflow)(nil),
				TName:        "prsim.Workflow",
				Name:         "Routines",
				Intype:       func() macro.Parameters { var parameters MeshWorkflowRoutinesParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshWorkflowRoutinesReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshWorkflowRoutinesParameters) },
				Outbound:     func() macro.Returns { return new(MeshWorkflowRoutinesReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.workflow.routines"},
				},
			},
		},
	})
}

// meshWorkflowMPI is an implementation of Workflow
type meshWorkflowMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshWorkflowMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshWorkflowMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshWorkflowMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Mass workflow work in group.
// Return workflow code
// @MPI("mesh.workflow.mass")
func (that *meshWorkflowMPI) Mass(ctx context.Context, group *types.WorkGroup) (string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Mass"], group)
	if nil != err {
		x := new(MeshWorkflowMassReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshWorkflowMassReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshWorkflowMassReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Groups page workflow review groups.
// @MPI("mesh.workflow.groups")
func (that *meshWorkflowMPI) Groups(ctx context.Context, index *types.Paging) (*types.Page[*types.WorkGroup], error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Groups"], index)
	if nil != err {
		x := new(MeshWorkflowGroupsReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshWorkflowGroupsReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshWorkflowGroupsReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Compile workflow in engine.
// Return workflow code
// @MPI("mesh.workflow.compile")
func (that *meshWorkflowMPI) Compile(ctx context.Context, chart *types.WorkChart) (string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Compile"], chart)
	if nil != err {
		x := new(MeshWorkflowCompileReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshWorkflowCompileReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshWorkflowCompileReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Index workflows.
// @MPI("mesh.workflow.index")
func (that *meshWorkflowMPI) Index(ctx context.Context, index *types.Paging) (*types.Page[*types.WorkChart], error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Index"], index)
	if nil != err {
		x := new(MeshWorkflowIndexReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshWorkflowIndexReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshWorkflowIndexReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Submit workflow.
// Return workflow instance code
// @MPI("mesh.workflow.submit")
func (that *meshWorkflowMPI) Submit(ctx context.Context, intent *types.WorkIntent) (string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Submit"], intent)
	if nil != err {
		x := new(MeshWorkflowSubmitReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshWorkflowSubmitReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshWorkflowSubmitReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Take action on workflow instance.
// @MPI("mesh.workflow.take")
func (that *meshWorkflowMPI) Take(ctx context.Context, vertex *types.WorkVertex) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Take"], vertex)
	return err
}

// Routines infer workflow instance as routine.
// @MPI("mesh.workflow.routines")
func (that *meshWorkflowMPI) Routines(ctx context.Context, index *types.Paging) (*types.Page[*types.WorkVertex], error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Routines"], index)
	if nil != err {
		x := new(MeshWorkflowRoutinesReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshWorkflowRoutinesReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshWorkflowRoutinesReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshWorkflowMassParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Group       *types.WorkGroup  `index:"0" json:"group" xml:"group" yaml:"group"`
}

func (that *MeshWorkflowMassParameters) GetKind() interface{} {
	return new(MeshWorkflowMassParameters)
}

func (that *MeshWorkflowMassParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Group)
	return arguments
}

func (that *MeshWorkflowMassParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Group = arguments[0].(*types.WorkGroup)
		}
	}
}

func (that *MeshWorkflowMassParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshWorkflowMassParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshWorkflowMassReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content string       `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshWorkflowMassReturns) GetCode() string {
	return that.Code
}

func (that *MeshWorkflowMassReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshWorkflowMassReturns) GetMessage() string {
	return that.Message
}

func (that *MeshWorkflowMassReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshWorkflowMassReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshWorkflowMassReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshWorkflowMassReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshWorkflowMassReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(string)
		}
	}
}

type MeshWorkflowGroupsParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Index       *types.Paging     `index:"0" json:"index" xml:"index" yaml:"index"`
}

func (that *MeshWorkflowGroupsParameters) GetKind() interface{} {
	return new(MeshWorkflowGroupsParameters)
}

func (that *MeshWorkflowGroupsParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Index)
	return arguments
}

func (that *MeshWorkflowGroupsParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Index = arguments[0].(*types.Paging)
		}
	}
}

func (that *MeshWorkflowGroupsParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshWorkflowGroupsParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshWorkflowGroupsReturns struct {
	Code    string                        `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string                        `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause                  `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Page[*types.WorkGroup] `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshWorkflowGroupsReturns) GetCode() string {
	return that.Code
}

func (that *MeshWorkflowGroupsReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshWorkflowGroupsReturns) GetMessage() string {
	return that.Message
}

func (that *MeshWorkflowGroupsReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshWorkflowGroupsReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshWorkflowGroupsReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshWorkflowGroupsReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshWorkflowGroupsReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Page[*types.WorkGroup])
		}
	}
}

type MeshWorkflowCompileParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Chart       *types.WorkChart  `index:"0" json:"chart" xml:"chart" yaml:"chart"`
}

func (that *MeshWorkflowCompileParameters) GetKind() interface{} {
	return new(MeshWorkflowCompileParameters)
}

func (that *MeshWorkflowCompileParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Chart)
	return arguments
}

func (that *MeshWorkflowCompileParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Chart = arguments[0].(*types.WorkChart)
		}
	}
}

func (that *MeshWorkflowCompileParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshWorkflowCompileParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshWorkflowCompileReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content string       `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshWorkflowCompileReturns) GetCode() string {
	return that.Code
}

func (that *MeshWorkflowCompileReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshWorkflowCompileReturns) GetMessage() string {
	return that.Message
}

func (that *MeshWorkflowCompileReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshWorkflowCompileReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshWorkflowCompileReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshWorkflowCompileReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshWorkflowCompileReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(string)
		}
	}
}

type MeshWorkflowIndexParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Index       *types.Paging     `index:"0" json:"index" xml:"index" yaml:"index"`
}

func (that *MeshWorkflowIndexParameters) GetKind() interface{} {
	return new(MeshWorkflowIndexParameters)
}

func (that *MeshWorkflowIndexParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Index)
	return arguments
}

func (that *MeshWorkflowIndexParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Index = arguments[0].(*types.Paging)
		}
	}
}

func (that *MeshWorkflowIndexParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshWorkflowIndexParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshWorkflowIndexReturns struct {
	Code    string                        `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string                        `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause                  `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Page[*types.WorkChart] `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshWorkflowIndexReturns) GetCode() string {
	return that.Code
}

func (that *MeshWorkflowIndexReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshWorkflowIndexReturns) GetMessage() string {
	return that.Message
}

func (that *MeshWorkflowIndexReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshWorkflowIndexReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshWorkflowIndexReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshWorkflowIndexReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshWorkflowIndexReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Page[*types.WorkChart])
		}
	}
}

type MeshWorkflowSubmitParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Intent      *types.WorkIntent `index:"0" json:"intent" xml:"intent" yaml:"intent"`
}

func (that *MeshWorkflowSubmitParameters) GetKind() interface{} {
	return new(MeshWorkflowSubmitParameters)
}

func (that *MeshWorkflowSubmitParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Intent)
	return arguments
}

func (that *MeshWorkflowSubmitParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Intent = arguments[0].(*types.WorkIntent)
		}
	}
}

func (that *MeshWorkflowSubmitParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshWorkflowSubmitParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshWorkflowSubmitReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content string       `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshWorkflowSubmitReturns) GetCode() string {
	return that.Code
}

func (that *MeshWorkflowSubmitReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshWorkflowSubmitReturns) GetMessage() string {
	return that.Message
}

func (that *MeshWorkflowSubmitReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshWorkflowSubmitReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshWorkflowSubmitReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshWorkflowSubmitReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshWorkflowSubmitReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(string)
		}
	}
}

type MeshWorkflowTakeParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Vertex      *types.WorkVertex `index:"0" json:"vertex" xml:"vertex" yaml:"vertex"`
}

func (that *MeshWorkflowTakeParameters) GetKind() interface{} {
	return new(MeshWorkflowTakeParameters)
}

func (that *MeshWorkflowTakeParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Vertex)
	return arguments
}

func (that *MeshWorkflowTakeParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Vertex = arguments[0].(*types.WorkVertex)
		}
	}
}

func (that *MeshWorkflowTakeParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshWorkflowTakeParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshWorkflowTakeReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshWorkflowTakeReturns) GetCode() string {
	return that.Code
}

func (that *MeshWorkflowTakeReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshWorkflowTakeReturns) GetMessage() string {
	return that.Message
}

func (that *MeshWorkflowTakeReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshWorkflowTakeReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshWorkflowTakeReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshWorkflowTakeReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshWorkflowTakeReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshWorkflowRoutinesParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Index       *types.Paging     `index:"0" json:"index" xml:"index" yaml:"index"`
}

func (that *MeshWorkflowRoutinesParameters) GetKind() interface{} {
	return new(MeshWorkflowRoutinesParameters)
}

func (that *MeshWorkflowRoutinesParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Index)
	return arguments
}

func (that *MeshWorkflowRoutinesParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Index = arguments[0].(*types.Paging)
		}
	}
}

func (that *MeshWorkflowRoutinesParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshWorkflowRoutinesParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshWorkflowRoutinesReturns struct {
	Code    string                         `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string                         `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause                   `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Page[*types.WorkVertex] `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshWorkflowRoutinesReturns) GetCode() string {
	return that.Code
}

func (that *MeshWorkflowRoutinesReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshWorkflowRoutinesReturns) GetMessage() string {
	return that.Message
}

func (that *MeshWorkflowRoutinesReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshWorkflowRoutinesReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshWorkflowRoutinesReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshWorkflowRoutinesReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshWorkflowRoutinesReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Page[*types.WorkVertex])
		}
	}
}
