/*
* Copyright (c) 2000, 2023, trustbe and/or its affiliates. All rights reserved.
* TRUSTBE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
*
*
 */

// Code generated by mesh; DO NOT EDIT.

package proxy

import (
	"context"

	"github.com/opendatav/mesh/client/golang/cause"
	"github.com/opendatav/mesh/client/golang/macro"
	"github.com/opendatav/mesh/client/golang/mpc"
	"github.com/opendatav/mesh/client/golang/prsim"
	"github.com/opendatav/mesh/client/golang/types"
)

func init() {
	var _ macro.Interface = new(meshKVMPI)
	macro.Provide((*prsim.KV)(nil), &meshKVMPI{
		invoker: mpc.ServiceProxy.Reference(&macro.Rtt{}),
		methods: map[string]*macro.Method{
			"Get": {
				DeclaredKind: (*prsim.KV)(nil),
				TName:        "prsim.KV",
				Name:         "Get",
				Intype:       func() macro.Parameters { var parameters MeshKVGetParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKVGetReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKVGetParameters) },
				Outbound:     func() macro.Returns { return new(MeshKVGetReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.kv.get"},
				},
			},
			"Put": {
				DeclaredKind: (*prsim.KV)(nil),
				TName:        "prsim.KV",
				Name:         "Put",
				Intype:       func() macro.Parameters { var parameters MeshKVPutParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKVPutReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKVPutParameters) },
				Outbound:     func() macro.Returns { return new(MeshKVPutReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.kv.put"},
				},
			},
			"Remove": {
				DeclaredKind: (*prsim.KV)(nil),
				TName:        "prsim.KV",
				Name:         "Remove",
				Intype:       func() macro.Parameters { var parameters MeshKVRemoveParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKVRemoveReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKVRemoveParameters) },
				Outbound:     func() macro.Returns { return new(MeshKVRemoveReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.kv.remove"},
				},
			},
			"Keys": {
				DeclaredKind: (*prsim.KV)(nil),
				TName:        "prsim.KV",
				Name:         "Keys",
				Intype:       func() macro.Parameters { var parameters MeshKVKeysParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKVKeysReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKVKeysParameters) },
				Outbound:     func() macro.Returns { return new(MeshKVKeysReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.kv.keys"},
				},
			},
			"Index": {
				DeclaredKind: (*prsim.KV)(nil),
				TName:        "prsim.KV",
				Name:         "Index",
				Intype:       func() macro.Parameters { var parameters MeshKVIndexParameters; return &parameters },
				Retype:       func() macro.Returns { var returns MeshKVIndexReturns; return &returns },
				Inbound:      func() macro.Parameters { return new(MeshKVIndexParameters) },
				Outbound:     func() macro.Returns { return new(MeshKVIndexReturns) },
				MPI: &macro.MPIAnnotation{
					Meta: &macro.Rtt{Name: "mesh.kv.index"},
				},
			},
		},
	})
}

// meshKVMPI is an implementation of KV
type meshKVMPI struct {
	invoker macro.Caller
	methods map[string]*macro.Method
}

func (that *meshKVMPI) Att() *macro.Att {
	return &macro.Att{Name: macro.MeshMPI}
}

func (that *meshKVMPI) Rtt() *macro.Rtt {
	return &macro.Rtt{Name: macro.MeshMPI}
}

func (that *meshKVMPI) GetMethods() map[string]*macro.Method {
	return that.methods
}

// Get the value from kv store.
// @MPI("mesh.kv.get")
func (that *meshKVMPI) Get(ctx context.Context, key string) (*types.Entity, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Get"], key)
	if nil != err {
		x := new(MeshKVGetReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshKVGetReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshKVGetReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Put the value to kv store.
// @MPI("mesh.kv.put")
func (that *meshKVMPI) Put(ctx context.Context, key string, value *types.Entity) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Put"], key, value)
	return err
}

// Remove the kv store.
// @MPI("mesh.kv.remove")
func (that *meshKVMPI) Remove(ctx context.Context, key string) error {
	_, err := that.invoker.Call(ctx, that.invoker, that.methods["Remove"], key)
	return err
}

// Keys with the pattern of kv store.
// @MPI("mesh.kv.keys")
func (that *meshKVMPI) Keys(ctx context.Context, pattern string) ([]string, error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Keys"], pattern)
	if nil != err {
		x := new(MeshKVKeysReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshKVKeysReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshKVKeysReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

// Index the kv for webui
// @MPI("mesh.kv.index")
func (that *meshKVMPI) Index(ctx context.Context, index *types.Paging) (*types.Page[*types.Entry], error) {
	ret, err := that.invoker.Call(ctx, that.invoker, that.methods["Index"], index)
	if nil != err {
		x := new(MeshKVIndexReturns)
		return x.Content, err
	}
	x, ok := ret.(*MeshKVIndexReturns)
	if ok {
		return x.Content, err
	}
	x = new(MeshKVIndexReturns)
	return x.Content, cause.Errorf("Cant resolve response ")
}

type MeshKVGetParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Key         string            `index:"0" json:"key" xml:"key" yaml:"key"`
}

func (that *MeshKVGetParameters) GetKind() interface{} {
	return new(MeshKVGetParameters)
}

func (that *MeshKVGetParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Key)
	return arguments
}

func (that *MeshKVGetParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Key = arguments[0].(string)
		}
	}
}

func (that *MeshKVGetParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKVGetParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKVGetReturns struct {
	Code    string        `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string        `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause  `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Entity `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshKVGetReturns) GetCode() string {
	return that.Code
}

func (that *MeshKVGetReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKVGetReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKVGetReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKVGetReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKVGetReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKVGetReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshKVGetReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Entity)
		}
	}
}

type MeshKVPutParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Key         string            `index:"0" json:"key" xml:"key" yaml:"key"`
	Value       *types.Entity     `index:"1" json:"value" xml:"value" yaml:"value"`
}

func (that *MeshKVPutParameters) GetKind() interface{} {
	return new(MeshKVPutParameters)
}

func (that *MeshKVPutParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Key)
	arguments = append(arguments, that.Value)
	return arguments
}

func (that *MeshKVPutParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Key = arguments[0].(string)
		}
		if len(arguments) > 1 && nil != arguments[1] {
			that.Value = arguments[1].(*types.Entity)
		}
	}
}

func (that *MeshKVPutParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKVPutParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKVPutReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshKVPutReturns) GetCode() string {
	return that.Code
}

func (that *MeshKVPutReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKVPutReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKVPutReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKVPutReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKVPutReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKVPutReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshKVPutReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshKVRemoveParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Key         string            `index:"0" json:"key" xml:"key" yaml:"key"`
}

func (that *MeshKVRemoveParameters) GetKind() interface{} {
	return new(MeshKVRemoveParameters)
}

func (that *MeshKVRemoveParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Key)
	return arguments
}

func (that *MeshKVRemoveParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Key = arguments[0].(string)
		}
	}
}

func (that *MeshKVRemoveParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKVRemoveParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKVRemoveReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
}

func (that *MeshKVRemoveReturns) GetCode() string {
	return that.Code
}

func (that *MeshKVRemoveReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKVRemoveReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKVRemoveReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKVRemoveReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKVRemoveReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKVRemoveReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	return arguments
}

func (that *MeshKVRemoveReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
	}
}

type MeshKVKeysParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Pattern     string            `index:"0" json:"pattern" xml:"pattern" yaml:"pattern"`
}

func (that *MeshKVKeysParameters) GetKind() interface{} {
	return new(MeshKVKeysParameters)
}

func (that *MeshKVKeysParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Pattern)
	return arguments
}

func (that *MeshKVKeysParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Pattern = arguments[0].(string)
		}
	}
}

func (that *MeshKVKeysParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKVKeysParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKVKeysReturns struct {
	Code    string       `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string       `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content []string     `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshKVKeysReturns) GetCode() string {
	return that.Code
}

func (that *MeshKVKeysReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKVKeysReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKVKeysReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKVKeysReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKVKeysReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKVKeysReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshKVKeysReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].([]string)
		}
	}
}

type MeshKVIndexParameters struct {
	Attachments map[string]string `index:"-1" json:"attachments" xml:"attachments" yaml:"attachments"`
	Index       *types.Paging     `index:"0" json:"index" xml:"index" yaml:"index"`
}

func (that *MeshKVIndexParameters) GetKind() interface{} {
	return new(MeshKVIndexParameters)
}

func (that *MeshKVIndexParameters) GetArguments(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Index)
	return arguments
}

func (that *MeshKVIndexParameters) SetArguments(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Index = arguments[0].(*types.Paging)
		}
	}
}

func (that *MeshKVIndexParameters) GetAttachments(ctx context.Context) map[string]string {
	return that.Attachments
}

func (that *MeshKVIndexParameters) SetAttachments(ctx context.Context, attachments map[string]string) {
	that.Attachments = attachments
}

type MeshKVIndexReturns struct {
	Code    string                    `index:"0" json:"code" xml:"code" yaml:"code" comment:"Result code"`
	Message string                    `index:"5" json:"message" xml:"message" yaml:"message" comment:"Result message"`
	Cause   *macro.Cause              `index:"10" json:"cause" xml:"cause" yaml:"cause" comment:"Service cause stacktrace"`
	Content *types.Page[*types.Entry] `index:"15" json:"content" xml:"content" yaml:"content"`
}

func (that *MeshKVIndexReturns) GetCode() string {
	return that.Code
}

func (that *MeshKVIndexReturns) SetCode(code string) {
	that.Code = code
}

func (that *MeshKVIndexReturns) GetMessage() string {
	return that.Message
}

func (that *MeshKVIndexReturns) SetMessage(message string) {
	that.Message = message
}

func (that *MeshKVIndexReturns) GetCause(ctx context.Context) *macro.Cause {
	return that.Cause
}

func (that *MeshKVIndexReturns) SetCause(ctx context.Context, cause *macro.Cause) {
	that.Cause = cause
}

func (that *MeshKVIndexReturns) GetContent(ctx context.Context) []interface{} {
	var arguments []interface{}
	arguments = append(arguments, that.Content)
	return arguments
}

func (that *MeshKVIndexReturns) SetContent(ctx context.Context, arguments ...interface{}) {
	if len(arguments) > 0 {
		if len(arguments) > 0 && nil != arguments[0] {
			that.Content = arguments[0].(*types.Page[*types.Entry])
		}
	}
}
